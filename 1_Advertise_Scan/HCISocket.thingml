import "Datatypes.thingml"
import "HCIMessages.thingml"

thing fragment HCISocketMsgs
{
  message Open();
  message Close();

  message Opened();
  message Closed();
}

thing fragment HCISocket includes HCISocketMsgs, HCIControllerCommandMsgs
{
  required port Socket
  {
    sends Open, Close
    receives Opened, Closed
  }

  required port HCICommands
  {
    sends Reset
    sends SetEventMask,SetEventMaskAll
    sends SetLocalName
    sends SetLEEventMask,SetLEEventMaskAll
    sends SetLEAdvertisementParameters
    sends SetLEAdvertiseEnable
    sends SetLEAdvertisingData
    sends SetLEScanResponseData
    sends SetLEScanParameters
    sends SetLEScanEnable
  }

  required port HCIEvents
  {
    receives ResetCompleted
    receives SetEventMaskCompleted
    receives SetLocalNameCompleted
    receives SetLEEventMaskCompleted
    receives SetLEAdvertisementParametersCompleted
    receives SetLEAdvertiseEnableCompleted
    receives SetLEAdvertisingDataCompleted
    receives SetLEScanResponseDataCompleted
    receives SetLEScanParametersCompleted
    receives SetLEScanEnableCompleted
  }
}

thing HCISocketProxy includes HCISocketMsgs, HCIControllerCommandMsgs
{
  property Device : String // Device address or name

  provided port Socket
  {
    receives Open, Close
    sends Opened, Closed
  }

  provided port Commands
  {
    receives Reset
    receives SetEventMask,SetEventMaskAll
    receives SetLocalName
    receives SetLEEventMask,SetLEEventMaskAll
    receives SetLEAdvertisementParameters
    receives SetLEAdvertiseEnable
    receives SetLEAdvertisingData
    receives SetLEScanResponseData
    receives SetLEScanParameters
    receives SetLEScanEnable
  }

  provided port Events
  {
    sends ResetCompleted
    sends SetEventMaskCompleted
    sends SetLocalNameCompleted
    sends SetLEEventMaskCompleted
    sends SetLEAdvertisementParametersCompleted
    sends SetLEAdvertiseEnableCompleted
    sends SetLEAdvertisingDataCompleted
    sends SetLEScanResponseDataCompleted
    sends SetLEScanParametersCompleted
    sends SetLEScanEnableCompleted
  }

  /* Platform specific functions */
  function OpenSocket() @abstract "true" @SuppressWarnings "Call" do end
  function CloseSocket() @abstract "true" @SuppressWarnings "Call" do end
  function SocketIsOpen() @abstract "true" @SuppressWarnings "Call" : Byte do end

  function SendCommand(Group: Int, Command : Int, Length : Byte, Data : DataPointer) @abstract "true" @SuppressWarnings "Call" do end

  /* Platform independent functions */
  function DecodeEvent(Event : Byte, Length : Byte, Data : DataPointer) do
    /* --- Received events --- */
    if (Event == '0x0E') do // Command Completed Event
      var NumberAllowedCommandPackets : Byte = ''&Data&'[0]'
      var Group : Int = '((int16_t)'&Data&'[2]) >> 2'
      var Command : Int = '(((int16_t)'&Data&'[2] & 0x03) << 8) | ((int16_t)'&Data&'[1])'
      var ReturnData : DataPointer = '&'&Data&'[3]'
      OnCommandCompletedEvent(NumberAllowedCommandPackets, Group, Command, ReturnData)

    end
  end

  function OnCommandCompletedEvent(NumberAllowedCommandPackets : Byte, Group : Int, Command : Int, Data : DataPointer) do
    if (Group == '0x0003') do
      if (Command == '0x0003') do // Reset
        var Status : Byte = ''&Data&'[0]'
        Events!ResetCompleted(NumberAllowedCommandPackets, Status)
      end
    end
  end

  /* Statechart (platform independent) */
  statechart Socket init Closed 
  {
    state Closed
    {
      on entry CloseSocket()

      transition -> Opening event Socket?Open
    }

    state Opening
    {
      on entry OpenSocket()

      transition -> Open guard (SocketIsOpen() > 0) action Socket!Opened()
      transition -> Closed guard (SocketIsOpen() == 0) action Socket!Closed()
    }

    state Open
    {
      transition -> Closed guard (SocketIsOpen() == 0) action Socket!Closed()
      transition -> Closed event Socket?Close action Socket!Closed()

      /* --- Commands to send --- */
      internal event Commands?Reset action SendCommand('0x03', '0x0003', '0', 'NULL')
    }
  }
}
