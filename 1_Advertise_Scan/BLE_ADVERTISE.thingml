import "ExitHandler.thingml"
import "HCISocketImpl.thingml"

thing Advertiser includes HCISocket, ExitHandlerMsgs
{
  required port Signals {
    receives Interrupt
    sends Quit
  }

  statechart States init Open
  {
    state Open
    {
      on entry do
        print "[INFO]: Opening HCI socket...\n"
        Socket!Open()
      end

      transition -> Initialise event Socket?Opened
      transition -> Quit event Socket?Closed
    }

    state Initialise
    {
      on entry do
        print "[INFO]: Initialising BLE Controller...\n"
        HCICommands!Reset()
      end

      internal event e:HCIEvents?ResetCompleted guard (e.Status == 0) action HCICommands!SetEventMaskAll()
      transition -> Failure event e:HCIEvents?ResetCompleted guard (e.Status > 0)

      internal event e:HCIEvents?SetEventMaskCompleted guard (e.Status == 0) action HCICommands!SetLEEventMaskAll()
      transition -> Failure event e:HCIEvents?SetEventMaskCompleted guard (e.Status > 0)

      transition -> SetAdvertiseData event e:HCIEvents?SetLEEventMaskCompleted guard (e.Status == 0)
      transition -> Failure event e:HCIEvents?SetLEEventMaskCompleted guard (e.Status > 0)

      transition -> Close event Signals?Interrupt
    }

    state SetAdvertiseData
    {
      on entry do
        print "[INFO]: Setting advertisement and scan response data...\n"

        var MinInterval : Int = '0x0640'
        var MaxInterval : Int = '0x0640'
        var Type : BLEAdvertisingType = BLEAdvertisingType:ADV_SCAN_IND 
        var OwnAddressType : BLEAddressType = BLEAddressType:PUBLIC 
        var PeerAddressType : BLEAddressType = BLEAddressType:PUBLIC 
        var PeerAddress : BTAddress = '{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }'
        var Channel : BLEAdvertisingChannel = BLEAdvertisingChannel:ALL 
        var FilterPolicy : BLEAdvertisingFilterPolicy = BLEAdvertisingFilterPolicy:ALL 

        HCICommands!SetLEAdvertisementParameters(MinInterval,MaxInterval,Type,OwnAddressType,PeerAddressType,PeerAddress,Channel,FilterPolicy)
      end

      internal event e:HCIEvents?SetLEAdvertisementParametersCompleted guard (e.Status == 0) action do
        var Length : Byte = '0x0D'
        var Data : BLEAdvertiseData = '{ 0x0C, 0x09,\'T\',\'h\',\'i\',\'n\',\'g\',\'M\',
                                        \'L\',\'-\',\'B\',\'L\',\'E\', 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }'
        HCICommands!SetLEAdvertisingData(Length,Data)
      end
      transition -> Failure event e:HCIEvents?SetLEAdvertisementParametersCompleted guard (e.Status > 0)

      internal event e:HCIEvents?SetLEAdvertisingDataCompleted guard (e.Status == 0) action do
        var Length : Byte = '0x10'
        var Data : BLEAdvertiseData = '{ 0x0F, 0x24, 0x16,\'/\',\'/\',\'t\',\'h\',\'i\',
                                        \'n\',\'g\',\'m\',\'l\',\'.\',\'o\',\'r\',\'g\',
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }'
        HCICommands!SetLEScanResponseData(Length,Data)
      end
      transition -> Failure event e:HCIEvents?SetLEAdvertisingDataCompleted guard (e.Status > 0)

      internal event e:HCIEvents?SetLEScanResponseDataCompleted guard (e.Status == 0) action HCICommands!SetLEAdvertiseEnable('0x01')
      transition -> Failure event e:HCIEvents?SetLEScanResponseDataCompleted guard (e.Status > 0)

      transition -> Advertising event e:HCIEvents?SetLEAdvertiseEnableCompleted guard (e.Status == 0)
      transition -> Failure event e:HCIEvents?SetLEAdvertiseEnableCompleted guard (e.Status > 0)

      transition -> Close event Signals?Interrupt
    }

    state Advertising
    {
      on entry print "[INFO]: Advertising :)\n"

      internal event Signals?Interrupt action HCICommands!SetLEAdvertiseEnable('0x00')

      transition -> Close event e:HCIEvents?SetLEAdvertiseEnableCompleted guard (e.Status == 0)
      transition -> Failure event e:HCIEvents?SetLEAdvertiseEnableCompleted guard (e.Status > 0)
    }

    state Failure
    {
      on entry do
        print "[ERROR]: Something went wrong :(\n"
        Socket!Close()
      end

      transition -> Quit event Socket?Closed
      transition -> Quit event Signals?Interrupt
    }

    state Close
    {
      on entry do
        print "[INFO]: Closing HCI socket...\n"
        Socket!Close()
      end

      transition -> Quit event Socket?Closed
      transition -> Quit event Signals?Interrupt
    }

    state Quit
    {
      on entry Signals!Quit(0)
    }
  }
}

configuration BLE_ADVERTISE
@add_c_libraries "bluetooth"
{
  instance e : ExitHandler
  instance s : HCISocketProxyImpl
  instance a : Advertiser

  connector a.Signals => e.Signals
  connector a.Socket => s.Socket
  connector a.HCICommands => s.Commands
  connector a.HCIEvents => s.Events

  //set s.Device = "B8:27:EB:03:FA:CD"
  set s.Device = "B8:27:EB:F1:1D:FF"
}
