import "NeoPixelBP.thingml"
import "BLEGateway.thingml"

thing fragment BPSensorMsgs {
	message idle()
	message pumping()
	message measuring()
}

thing BPSensor includes BPSensorMsgs, TimerMsgs {

	required port clock {
		receives ui_clock
	}

	provided port ctrl {
		sends idle, pumping, measuring
	}
	
	statechart BPSensorImpl init Idle {
	
		on entry do
			'pinMode(4, INPUT);
  			 pinMode(5, INPUT);'
		end
	
		state Idle {
			on entry ctrl!idle()
			
			transition -> Pumping  event clock?ui_clock
			guard 'digitalRead(4) == 0'
		
		}
		
		state Pumping {
			on entry ctrl!pumping()
			
			transition -> Idle event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Measuring event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) == 0'
		}
		
		state Measuring {
			on entry ctrl!measuring()
			
			transition -> Idle  event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Pumping event clock?ui_clock
			guard 'digitalRead(4) == 0'
			
		}
	} 
}

thing BLENotifier includes NeoPixelMsgs, BPSensorMsgs, TimerMsgs, GatewayCommandMsgs { 

	required port gateway {
		receives request_measurement, measurement_received, bad_measurement, measurement_stored, set_base_color
	}
	
	required port sensor {
		receives idle, pumping, measuring
	}
	
	required port neopixels {
		sends setColor, off, pulse, rotate, breath, solid
	}
	
	required port clock {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
	
	function breath() do
		neopixels!off()
		neopixels!setColor(0, 50, 255)
		neopixels!breath()
	end
	
	function pulse() do
		neopixels!off()
		neopixels!setColor(255, 32, 0)
		neopixels!pulse()
	end
	
	function pump() do
		neopixels!off()
		neopixels!setColor(255, 32, 0)
		neopixels!rotate(12)
	end
	
	function measure() do
		neopixels!off()
		neopixels!setColor(160, 140, 0)
		neopixels!rotate(-2)
	end
	
	function solid(r : UInt8, g : UInt8, b : UInt8) do
		neopixels!off()
		neopixels!setColor(r, g, b)
		neopixels!solid()
	end

	statechart BLENotifierSC init Init {
	
		internal event c:gateway?set_base_color action neopixels!setColor(c.r, c.g, c.b)
	
		state Init {
			on entry do
				solid(0, 128, 32)
				clock!timer_start(0, 1000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action breath()
		}
	
		state Ready {
			internal event gateway?request_measurement action pulse()
			transition -> Measuring event sensor?pumping action pump()
		}
		
		state Measuring {
			internal event sensor?measuring action measure()
			internal event sensor?pumping action pump()
			transition -> WaitGatewayAck event sensor?idle
		}
		
		state WaitGatewayAck {
			on entry do
				solid(128, 128, 0)
				clock!timer_start(0, 5000)
			end
			
			transition -> GatewayError event t:clock?timer_timeout guard t.id == 0
			transition -> GatewayError event gateway?bad_measurement
			transition -> WaitServerAck event gateway?measurement_received
		}
		
		state GatewayError {
			on entry do
				solid(255, 0, 0)
				clock!timer_start(0, 2000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action pulse()
		}
		
		state WaitServerAck {
			on entry do
				neopixels!off()
				neopixels!setColor(0, 255, 32)
				neopixels!rotate(25)
				clock!timer_start(0, 5000)
			end
			
			transition -> ServerError event t:clock?timer_timeout guard t.id == 0
			transition -> Ready event gateway?measurement_stored action breath()
		}
		
		state ServerError {
			on entry do
				neopixels!setColor(255, 32, 0)
				clock!timer_start(0, 2000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action breath()
		}
		
	}
}

protocol Timer;

configuration BLENotifier
{
	instance notifier : BLENotifier
	instance uart : Serial
	instance neopixels : NeoPixel
	instance sensor : BPSensor
	instance gwcmd : GatewayCommandParser
	
	connector notifier.neopixels => neopixels.ctrl
	connector gwcmd.bletx => uart.tx
	connector gwcmd.blerx => uart.rx
	connector notifier.gateway => gwcmd.gateway
	connector notifier.sensor => sensor.ctrl
	connector neopixels.clock over Timer
	connector sensor.clock over Timer
	connector notifier.clock over Timer
}