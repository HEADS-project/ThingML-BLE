import "NeoPixelNotifier.thingml"
import "BLEGateway.thingml"

thing fragment BPSensorMsgs {
	message idle()
	message pumping()
	message measuring()
}

thing BPSensor includes BPSensorMsgs, TimerMsgs {

	required port clock {
		receives ui_clock
	}

	provided port ctrl {
		sends idle, pumping, measuring
	}
	
	statechart BPSensorImpl init Idle {
	
		on entry do
			'pinMode(4, INPUT);
  			 pinMode(5, INPUT);'
		end
	
		state Idle {
			on entry ctrl!idle()
			
			transition -> Pumping  event clock?ui_clock
			guard 'digitalRead(4) == 0'
		
		}
		
		state Pumping {
			on entry ctrl!pumping()
			
			transition -> Idle event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Measuring event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) == 0'
		}
		
		state Measuring {
			on entry ctrl!measuring()
			
			transition -> Idle  event clock?ui_clock
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Pumping event clock?ui_clock
			guard 'digitalRead(4) == 0'
			
		}
	} 
}

thing BLENotifier includes NeoPixelNotifierClient, BPSensorMsgs, TimerMsgs, GatewayCommandMsgs { 

	required port gateway {
		receives request_measurement, measurement_received, bad_measurement, measurement_stored, set_base_color
	}
	
	required port sensor {
		receives idle, pumping, measuring
	}
	
	required port clock {
		receives timer_timeout
		sends timer_start, timer_cancel
	}


	statechart BLENotifierSC init Init {
	
		internal event c:gateway?set_base_color action neopixels!setColor(c.r, c.g, c.b)
	
		state Init {
			on entry do
				neo_solid(0, 128, 32)
				clock!timer_start(0, 1000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action neo_standby()
		}
	
		state Ready {
			internal event gateway?request_measurement action neo_requested()
			transition -> Measuring event sensor?pumping action neo_measuring1()
		}
		
		state Measuring {
			internal event sensor?measuring action neo_measuring2()
			internal event sensor?pumping action neo_measuring1()
			transition -> WaitGatewayAck event sensor?idle
		}
		
		state WaitGatewayAck {
			on entry do
				neo_bluetooth()
				clock!timer_start(0, 10000)
			end
			
			transition -> GatewayError event t:clock?timer_timeout guard t.id == 0
			transition -> GatewayError event gateway?bad_measurement
			transition -> WaitServerAck event gateway?measurement_received
		}
		
		state GatewayError {
			on entry do
				neo_gateway_error()
				clock!timer_start(0, 2000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action neo_requested()
		}
		
		state WaitServerAck {
			on entry do
				neo_gateway_ack()
				clock!timer_start(0, 10000)
			end
			
			transition -> ServerError event t:clock?timer_timeout guard t.id == 0
			transition -> ServerSuccess event gateway?measurement_stored 
		}
		
		state ServerError {
			on entry do
				neo_tellucloud_error()
				clock!timer_start(0, 3000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action neo_standby()
		}
		
		state ServerSuccess {
			on entry do
				neo_tellucloud_ack()
				clock!timer_start(0, 3000)
			end
			
			transition -> Ready event t:clock?timer_timeout guard t.id == 0 action neo_standby()
		}
		
	}
}

protocol Timer;

configuration BLENotifier
{
	instance notifier : BLENotifier
	instance uart : Serial
	instance neopixels : NeoPixelNotifier
	set neopixels.neopixel_pin = 7
	set neopixels.neopixel_total_count = 10
	set neopixels.neopixel_logo_first = 8
	set neopixels.neopixel_logo_last = 9
	set neopixels.neopixel_ring_first = 0
	set neopixels.neopixel_ring_last = 7
	
	instance sensor : BPSensor
	instance gwcmd : GatewayCommandParser
	
	connector notifier.neopixels => neopixels.ctrl
	connector gwcmd.bletx => uart.tx
	connector gwcmd.blerx => uart.rx
	connector notifier.gateway => gwcmd.gateway
	connector notifier.sensor => sensor.ctrl
	connector neopixels.clock over Timer
	connector sensor.clock over Timer
	connector notifier.clock over Timer
}