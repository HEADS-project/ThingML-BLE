thing Tryggi includes TryggiMsgs , NeoPixelGroupMsgs , TimerMsgs {
	provided port ctrl {
		sends pong_tryggy receives ping_tryggy receives bluetooth_act receives tellucloud_act receives show_success receives show_error receives clear_status
	}
	required port timer {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	required port head {
		sends setColor sends off sends pulse sends rotate sends breath sends solid sends blink
	}
	required port heart {
		sends setColor sends off sends pulse sends rotate sends breath sends solid sends blink
	}
	readonly property TIMERID : UInt8 = 2
	function neo_standby() do
		head!off()
		heart!off()
		heart!setColor(0, 40, 255)
		heart!pulse()
	end
	function neo_clear_status() do
		head!off()
	end
	function neo_ping_lost() do
		head!off()
		heart!off()
		heart!setColor(255, 32, 0)
		heart!blink()
	end
	function neo_success() do
		head!off()
		head!setColor(0, 255, 40)
		head!solid()
	end
	function neo_error() do
		head!off()
		head!setColor(255, 40, 0)
		head!blink()
	end
	function neo_bluetooth_act() do
		head!off()
		head!setColor(0, 50, 255)
		head!blink()
	end
	function neo_tellucloud_act() do
		head!off()
		head!setColor(160, 140, 0)
		head!blink()
	end
	function got_ping() do
		timer!timer_cancel(TIMERID)
		ctrl!pong_tryggy()
		timer!timer_start(TIMERID, 5000)
	end
	statechart TryggiSC init WaitingForPing {
		state WaitingForPing {
			on entry neo_ping_lost()
			transition -> Connected
			event ctrl?ping_tryggy
			action got_ping()
		}
		state Connected {
			on entry neo_standby()
			internal
			event ctrl?ping_tryggy
			action got_ping()
			internal
			event ctrl?bluetooth_act
			action neo_bluetooth_act()
			internal
			event ctrl?tellucloud_act
			action neo_tellucloud_act()
			internal
			event ctrl?show_error
			action neo_error()
			internal
			event ctrl?clear_status
			action neo_clear_status()
			internal
			event ctrl?show_success
			action neo_success()
			transition -> WaitingForPing
			event e : timer?timer_timeout
			guard e.id == TIMERID
		}
	}
}
thing fragment NeoPixelGroupMsgs {
	message off()
	message setColor(red : UInt8, green : UInt8, blue : UInt8)
	message solid()
	message pulse()
	message blink()
	message breath()
	message rotate(speed : Int8)
}
thing NeoPixelGroup includes NeoPixelGroupMsgs , TimerMsgs @c_global "
#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel strip;

#define BREATH_LEN 36
uint8_t breath[] = {0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 8, 11, 14, 18, 23, 29, 36, 43, 52, 61, 72, 83, 96, 110, 124, 140, 155, 171, 186, 202, 216, 228, 238, 247, 252, 255};

#define PULSE_LEN 37
uint8_t pulse[] =  {32, 40, 50, 55, 50, 32, 32, 32, 20, 10, 20, 40, 80, 160, 230, 255, 230, 160, 80, 40, 20, 10, 5, 2, 0, 6, 16, 30, 32, 32, 40, 48, 55, 60, 50, 36, 32};

#define BLINK_LEN 11
uint8_t blink[] =  {0, 6, 24, 52, 88, 127, 166, 202, 230, 248, 255};

#define ROTATE_LEN 10
uint8_t rotatep[] =  {0, 0, 255, 0, 0, 0, 0, 255, 0, 0};

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
" {
	provided port ctrl {
		receives setColor receives solid receives pulse receives off receives breath receives rotate receives blink
	}
	required port clock {
		receives fps_clock
	}
	readonly property neopixel_pin : UInt8 = 7
	readonly property neopixel_total_count : UInt8 = 4
	readonly property neopixel_first : UInt8 = 0
	readonly property neopixel_last : UInt8 = 2
	function setPixelColor(pixel : UInt8, color : UInt32) do
		'strip.setPixelColor(' & pixel & ', ' & color & ');'
	end
	function getColor(red : UInt8, green : UInt8, blue : UInt8) : UInt32 do
		return 'strip.Color(' & red & ', ' & green & ', ' & blue & ')'
	end
	function updateNeopixels() do
	'strip.show();'
	end
	function breath_brightness(time : UInt8, max : UInt8) : UInt8 do
		if (time > max / 2) return breath_brightness(max - time, max)
		if (time == max / 2) return 'breath[BREATH_LEN-1]'
		var index : UInt16 = (time * 'BREATH_LEN') / (max / 2)
		var prev : UInt16 = (index * (max / 2)) / 'BREATH_LEN'
		var next : UInt16 = ((index + 1) * (max / 2)) / 'BREATH_LEN'
		var nextv : UInt16
		if (index < 'BREATH_LEN' - 1) nextv = 'breath[' & index + 1 & ']'
		else nextv = 'breath[' & index & ']'
		return ((next - time) * 'breath[' & index & ']' + (time - prev) * nextv) / (next - prev)
	end
	function rotate_brightness(angle : UInt8, max : UInt8) : UInt8 do
		var index : UInt16 = (angle * 'ROTATE_LEN') / max
		var prev : UInt16 = (index * max) / 'ROTATE_LEN'
		var next : UInt16 = ((index + 1) * max) / 'ROTATE_LEN'
		var nextv : UInt8
		if (index < 'ROTATE_LEN' - 1) nextv = 'rotatep[' & index + 1 & ']'
		else nextv = 'rotatep[0]'
		return ((next - angle) * 'rotatep[' & index & ']' + (angle - prev) * nextv) / (next - prev)
	end
	function pulse_brightness(time : UInt8) : UInt8 do
		if (time < 'PULSE_LEN') return 'pulse[' & time & ']'
		else return 'pulse[0]'
	end
	function blink_brightness(time : UInt8) : UInt8 do
		if (time < 'BLINK_LEN') return 'blink[' & time & ']'
		else if (time < 'BLINK_LEN*2') return 'blink[BLINK_LEN*2-' & time & '-1]'
		else return 'blink[0]'
	end
	function initializeNeopixels() do
		'strip = Adafruit_NeoPixel(' & neopixel_total_count & ', ' & neopixel_pin & ', NEO_GRBW + NEO_KHZ800);
		 strip.begin();
		 strip.setBrightness(255);
		 strip.show();'
		var color : UInt32 = getColor(0, 50, 255)
		setPixelColor(neopixel_total_count, color)
		updateNeopixels()
	end
	statechart NeoPixelStateChart init PULSE {
		property color_r : UInt8 = 100
		property color_g : UInt8 = 10
		property color_b : UInt8 = 0
		property rotate_speed : Int8 = 4
		property breath_speed : UInt8 = 100
		on entry initializeNeopixels()
		state OFF {
			on entry do
				var i : UInt8 = neopixel_first
				var color : UInt32 = getColor(0, 0, 0)
				while (i <= neopixel_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			end
			transition -> SOLID
			event ctrl?solid
			transition -> PULSE
			event ctrl?pulse
			transition -> BLINKALL
			event ctrl?blink
			transition -> BREATH
			event ctrl?breath
			transition -> ROTATE
			event m : ctrl?rotate
			action rotate_speed = m.speed
		}
		state SOLID {
			internal
			event clock?fps_clock
			action do
				var rcolor : UInt32 = getColor(color_r, color_g, color_b)
				var i : UInt8 = neopixel_first
				while (i <= neopixel_last) do
					setPixelColor(i, rcolor)
					i = i + 1
				end
				updateNeopixels()
			end
			transition -> OFF
			event ctrl?off
		}
		state ROTATE {
			property angle : Int16 = 0
			property maxangle : UInt8 = 200
			on entry do
				var i : UInt8 = neopixel_first
				var color : UInt32 = getColor(color_r, color_g, color_b)
				while (i <= neopixel_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			end
			internal
			event clock?fps_clock
			action do
				var i : UInt8 = neopixel_first
				while (i <= neopixel_last) do
					var pangle : UInt16 = angle + (i * maxangle) / (neopixel_last - neopixel_first + 1)
					pangle = pangle % maxangle
					var bright : UInt8 = rotate_brightness(pangle, maxangle)
					var color : UInt32 = getColor((color_r * bright) / 256, (color_g * bright) / 256, (color_b * bright) / 256)
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
				angle = angle + rotate_speed
				if (angle < 0) angle = maxangle + angle
				if (angle > maxangle - 1) angle = angle - maxangle
			end
			transition -> OFF
			event ctrl?off
		}
		state BREATH {
			property counter : UInt8 = 0
			readonly property maxcount : UInt8 = 186
			internal
			event clock?fps_clock
			action do
				var bright : UInt8 = breath_brightness(counter, maxcount)
				var color : UInt32 = getColor((color_r * bright) / 256, (color_g * bright) / 256, (color_b * bright) / 256)
				var i : UInt8 = neopixel_first
				while (i <= neopixel_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
			transition -> OFF
			event ctrl?off
		}
		state PULSE {
			property counter : UInt8 = 0
			readonly property maxcount : UInt8 = 100
			internal
			event clock?fps_clock
			action do
				var bright : UInt8 = pulse_brightness(counter)
				var color : UInt32 = getColor((color_r * bright) / 256, (color_g * bright) / 256, (color_b * bright) / 256)
				var i : UInt8 = neopixel_first
				while (i <= neopixel_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
			transition -> OFF
			event ctrl?off
		}
		state BLINKALL {
			property counter : UInt8 = 0
			readonly property maxcount : UInt8 = 22
			internal
			event clock?fps_clock
			action do
				var bright : UInt8 = blink_brightness(counter)
				var rcolor : UInt32 = getColor((color_r * bright) / 256, (color_g * bright) / 256, (color_b * bright) / 256)
				var i : UInt8 = neopixel_first
				while (i <= neopixel_last) do
					setPixelColor(i, rcolor)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
			transition -> OFF
			event ctrl?off
		}
		internal
		event c : ctrl?setColor
		action do
			color_r = c.red
			color_g = c.green
			color_b = c.blue
		end
	}
}
thing fragment TryggiMsgs {
	message ping_tryggy()
	@code "200"
	message pong_tryggy()
	@code "201" message bluetooth_act()
	@code "202"
	message tellucloud_act()
	@code "203"
	message show_success()
	@code "204"
	message show_error()
	@code "205"
	message clear_status()
	@code "206"
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true"
	message io_clock()
	@xms_tic "10" message fps_clock()
	@xms_tic "33"
	message ui_clock()
	@xms_tic "231"
}
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@c_byte_size "1"
object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "2"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
enumeration DigitalState
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
	@scala_type "Byte"
	@SenML_type "Double"
enumeration DigitalState
	@c_type "uint8_t"
	@c_byte_size "1"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
protocol Serial
	@serial_baudrate "9600"
	@serial_path_to_device "/dev/ttyS0"
	@serializer "binary" ;

protocol Timer ;

configuration TryggiArduino {
	instance tryggi : Tryggi
	instance neo_head : NeoPixelGroup
	instance neo_heart : NeoPixelGroup
	connector tryggi.timer over Timer
	connector neo_head.clock over Timer
	connector tryggi.head => neo_head . ctrl
	connector neo_heart.clock over Timer
	connector tryggi.heart => neo_heart . ctrl
	connector tryggi.ctrl over Serial
	set neo_head.neopixel_pin = 7
	set neo_head.neopixel_first = 1
	set neo_head.neopixel_last = 3
	set neo_heart.neopixel_pin = 7
	set neo_heart.neopixel_first = 0
	set neo_heart.neopixel_last = 0
}
