import "NeoPixel.thingml"

thing fragment SerialMsgs {
	message receive_byte (b : Byte);
	message write_byte (b : Byte);
	message print_message (msg : String);
}


thing fragment BPSensorMsgs {
	message idle()
	message pumping()
	message measuring()
}

thing BPSensor includes BPSensorMsgs, TimerMsgs {

	required port clock {
		receives update
	}

	provided port ctrl {
		sends idle, pumping, measuring
	}
	
	statechart BPSensorImpl init Idle {
	
		on entry do
			'pinMode(4, INPUT);
  			 pinMode(5, INPUT);'
		end
	
		state Idle {
			on entry ctrl!idle()
			
			transition -> Pumping  event clock?update
			guard 'digitalRead(4) == 0'
		
		}
		
		state Pumping {
			on entry ctrl!pumping()
			
			transition -> Idle event clock?update
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Measuring event clock?update
			guard 'digitalRead(4) != 0 && digitalRead(5) == 0'
		}
		
		state Measuring {
			on entry ctrl!measuring()
			
			transition -> Idle  event clock?update
			guard 'digitalRead(4) != 0 && digitalRead(5) != 0'
			
			transition -> Pumping event clock?update
			guard 'digitalRead(4) == 0'
			
		}
	} 
}


thing Serial includes SerialMsgs
{
   
    provided port rx
	{
		sends receive_byte
	}
	provided port tx 
	{
		receives write_byte, print_message
	}

    statechart SerialImpl init Receiving 
    {        
        state Receiving 
        {
            on entry 'Serial.begin(9600);'
            
            internal guard 'Serial.available()' > 0
            action do 
            	rx!receive_byte ('(char)Serial.read()')
            end
        }
    }
}

thing BLENotifier includes NeoPixelMsgs, SerialMsgs, BPSensorMsgs { 

	required port blerx
	{
		receives receive_byte
	}
	
	required port bletx
	@sync_send "true"
	{
		sends write_byte, print_message
	}
	
	required port sensor
	{
		receives idle, pumping, measuring
	}
	
	required port neopixels {
		sends setColor, off, pulse, rotate, breath, solid
	}
	
	function breath() do
		neopixels!off()
		neopixels!setColor(120, 132, 132)
		neopixels!breath()
	end
	
	function pump() do
		neopixels!off()
		neopixels!setColor(255, 32, 0)
		neopixels!rotate(10)
	end
	
	function measure() do
		neopixels!off()
		neopixels!setColor(160, 140, 0)
		neopixels!rotate(-3)
	end

	statechart BLENotifierSC init Ready {
	
		on entry breath()
		
		internal event sensor?idle action breath()
		internal event sensor?pumping action pump()
		internal event sensor?measuring action measure()
		
		state Ready {
			transition -> ParseCommand event m : blerx?receive_byte guard m.b == '\'!\''
		}	
		
		state ParseCommand {
			transition -> SetColor event m : blerx?receive_byte guard m.b == '\'C\''
			
			transition -> Ready event m : blerx?receive_byte guard m.b == '\'P\'' action do
				neopixels!off()
				neopixels!setColor(255, 32, 0)
				neopixels!pulse()
			end
			
			transition -> Ready event m : blerx?receive_byte guard m.b == '\'B\'' action breath()
			transition -> Ready event m : blerx?receive_byte guard m.b == '\'R\'' action pump()
			transition -> Ready event m : blerx?receive_byte guard m.b == '\'r\'' action measure()
			
			transition -> Ready event m : blerx?receive_byte guard m.b == '\'S\'' action do
				neopixels!off()
				neopixels!setColor(0, 200, 32)
				neopixels!solid()
			end
		}
		
		state SetColor {
			property buf : UInt8[2]
			property idx : UInt8
			
			on entry do
				idx = 0
			end
			
			internal event m : blerx?receive_byte guard idx < 2 action do
				buf[idx] = m.b
				idx = idx + 1
			end
			
			transition -> Ready event m : blerx?receive_byte guard idx == 2 action do
				neopixels!setColor(buf[0], buf[1], m.b)
				bletx!print_message("OK\n")
			end
		}
		
	}
}

protocol Timer;

configuration BLENotifier
{
	instance notifier : BLENotifier
	instance uart : Serial
	instance neopixels : NeoPixel
	instance sensor : BPSensor
	
	connector notifier.neopixels => neopixels.ctrl
	connector notifier.bletx => uart.tx
	connector notifier.blerx => uart.rx
	connector notifier.sensor => sensor.ctrl
	connector neopixels.clock over Timer
	connector sensor.clock over Timer
}