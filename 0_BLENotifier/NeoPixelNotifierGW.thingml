import "_Timer.thingml"

thing fragment NeoPixelNotifierGWMsgs {
	message off();
	message setColor(red : UInt8, green : UInt8, blue : UInt8);
	message setRingColor(red : UInt8, green : UInt8, blue : UInt8);
	message setLogoColor(red : UInt8, green : UInt8, blue : UInt8);
	message solid();
	message pulse();
	message blink();
	message blink_logo();
	message breath();
	message rotate(speed : Int8);
}

thing NeoPixelNotifierGW includes NeoPixelNotifierGWMsgs, TimerMsgs
@c_global "
#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel strip;

#define BREATH_LEN 36
uint8_t breath[] = {0, 0, 0, 0, 0, 0, 1, 2, 3, 5, 8, 11, 14, 18, 23, 29, 36, 43, 52, 61, 72, 83, 96, 110, 124, 140, 155, 171, 186, 202, 216, 228, 238, 247, 252, 255};

#define PULSE_LEN 37
uint8_t pulse[] =  {32, 40, 50, 55, 50, 32, 32, 32, 20, 10, 20, 40, 80, 160, 230, 255, 230, 160, 80, 40, 20, 10, 5, 2, 0, 6, 16, 30, 32, 32, 40, 48, 55, 60, 50, 36, 32};

#define BLINK_LEN 11
uint8_t blink[] =  {0, 6, 24, 52, 88, 127, 166, 202, 230, 248, 255};

#define ROTATE_LEN 10
uint8_t rotatep[] =  {0, 0, 255, 0, 0, 0, 0, 255, 0, 0};

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
"
{ 
	readonly property neopixel_pin : UInt8 = 7
	
	readonly property neopixel_total_count : UInt8 = 4
	
	readonly property neopixel_ring_first : UInt8 = 0
	readonly property neopixel_ring_last : UInt8 = 2
	readonly property ring_brightness_divider : UInt8 = 1
	
	readonly property neopixel_logo_first : UInt8 = 3
	readonly property neopixel_logo_last : UInt8 = 3
	
	
	
	
	provided port ctrl {
		receives setColor, setRingColor, setLogoColor, solid, pulse, off, breath, rotate, blink, blink_logo
	}
	
	required port clock {
		receives fps_clock
	}
	
	function setPixelColor(pixel : UInt8, color: UInt32) do
		'strip.setPixelColor('&pixel&', '&color&');'
	end 
	
	function getColor(red : UInt8, green : UInt8, blue : UInt8) : UInt32 do
		return 'strip.Color('&red&', '&green&', '&blue&')'
	end
	
	function updateNeopixels() do
		'strip.show();'
	end
	
	function breath_brightness(time : UInt8, max : UInt8) : UInt8 do
		if (time > max/2) return breath_brightness(max - time , max)
		if (time == max/2) return 'breath[BREATH_LEN-1]'
		
		var index : UInt16 = (time * 'BREATH_LEN') / (max/2)
		var prev : UInt16 = (index * (max/2)) / 'BREATH_LEN'
		var next : UInt16 = ((index + 1) * (max/2)) / 'BREATH_LEN'

		var nextv : UInt16
		if (index < 'BREATH_LEN' - 1) nextv = 'breath['&index+1&']'
		else nextv = 'breath['&index&']'

		return ( (next-time) * 'breath['&index&']' + (time-prev) * nextv ) / (next-prev)
	end 
	
	function rotate_brightness(angle : UInt8, max : UInt8) : UInt8 do
	
		var index : UInt16 = (angle * 'ROTATE_LEN') / max
		var prev : UInt16 = (index * max) / 'ROTATE_LEN'
		var next : UInt16 = ((index + 1) * max) / 'ROTATE_LEN'

		var nextv : UInt8
		if (index < 'ROTATE_LEN' - 1) nextv = 'rotatep['&index+1&']'
		else nextv = 'rotatep[0]'

		return ( (next-angle) * 'rotatep['&index&']' + (angle-prev) * nextv ) / (next-prev)
	end 
	
	function pulse_brightness(time : UInt8) : UInt8 do
		if (time < 'PULSE_LEN') return 'pulse['&time&']'
		else return 'pulse[0]'
	end
	
	function blink_brightness(time : UInt8) : UInt8 do
		if (time < 'BLINK_LEN') return 'blink['&time&']'
		else if (time < 'BLINK_LEN*2') return 'blink[BLINK_LEN*2-'&time&'-1]'
		else return 'blink[0]'
	end
	
	
	function initializeNeopixels() do
		'strip = Adafruit_NeoPixel('&neopixel_total_count&', '&neopixel_pin&', NEO_GRBW + NEO_KHZ800);
		 strip.begin();
		 strip.setBrightness(255);
		 strip.show();'
		 var color : UInt32 = getColor(0,50,255)
		 setPixelColor(neopixel_total_count, color)
		 updateNeopixels()
	end

	statechart NeoPixelStateChart init PULSE {
	
		property color_r : UInt8 = 100
		property color_g : UInt8 = 10
		property color_b : UInt8 = 0
		
		property l_color_r : UInt8 = 100
		property l_color_g : UInt8 = 10
		property l_color_b : UInt8 = 0
		
		property rotate_speed : Int8 = 4
		property breath_speed : UInt8 = 100
		
		
		on entry initializeNeopixels()
		
		internal event c:ctrl?setColor action do 
			color_r = c.red / ring_brightness_divider
			color_g = c.green / ring_brightness_divider
			color_b = c.blue / ring_brightness_divider
			l_color_r = c.red
			l_color_g = c.green
			l_color_b = c.blue
		end
		
		internal event c:ctrl?setRingColor action do 
			color_r = c.red / ring_brightness_divider
			color_g = c.green / ring_brightness_divider
			color_b = c.blue / ring_brightness_divider
		end
		
		internal event c:ctrl?setLogoColor action do 
			l_color_r = c.red
			l_color_g = c.green
			l_color_b = c.blue
		end
		
	
		state OFF {
		
			on entry do
				var i : UInt8 = 0
				var color : UInt32 = getColor(0,0,0)
				while(i < neopixel_total_count) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			end
			
			transition -> SOLID event ctrl?solid
			transition -> PULSE event ctrl?pulse
			transition -> BLINKALL event ctrl?blink
			transition -> BLINKLOGO event ctrl?blink_logo
			transition -> BREATH event ctrl?breath
			transition -> ROTATE event m : ctrl?rotate action rotate_speed = m.speed
		}
	
		state SOLID {
			
			internal event clock?fps_clock action do
				
				var rcolor : UInt32 = getColor(color_r, color_g, color_b)
				var lcolor : UInt32 = getColor(l_color_r, l_color_g, l_color_b)
				var i : UInt8 = neopixel_ring_first
				while(i <= neopixel_ring_last) do
					setPixelColor(i, rcolor)
					i = i + 1
				end
				i = neopixel_logo_first
				while(i <= neopixel_logo_last) do
					setPixelColor(i, lcolor)
					i = i + 1
				end
				updateNeopixels()
				
			end
		
			transition -> OFF event ctrl?off
		}
		
	
		state ROTATE {

			property angle : Int16 = 0
			property maxangle : UInt8 = 200
			
			on entry do
				var i : UInt8 = neopixel_logo_first
				var color : UInt32 = getColor(l_color_r, l_color_g, l_color_b)
				while(i <= neopixel_logo_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			end

			transition -> OFF event ctrl?off
			
			internal event clock?fps_clock action do
			
				var i : UInt8 = neopixel_ring_first
				while(i <= neopixel_ring_last) do
					var pangle : UInt16 = angle + (i * maxangle) / (neopixel_ring_last-neopixel_ring_first+1)
					pangle = pangle % maxangle
					var bright : UInt8 = rotate_brightness(pangle, maxangle)
					var color : UInt32 = getColor((color_r*bright)/256, (color_g*bright)/256, (color_b*bright)/256)
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			
				angle = angle + rotate_speed
				if (angle < 0) angle = maxangle + angle
				if (angle > maxangle-1) angle = angle - maxangle   
			
			end
		}	
		
		state BREATH {
		
			property counter : UInt8 = 0
			readonly property maxcount: UInt8 = 186

			transition -> OFF event ctrl?off

			internal event clock?fps_clock action do
					var bright : UInt8 = breath_brightness(counter, maxcount)
					var color : UInt32 = getColor((l_color_r*bright)/256, (l_color_g*bright)/256, (l_color_b*bright)/256)
					var i : UInt8 = neopixel_ring_first
					while(i <= neopixel_ring_last) do
						setPixelColor(i, color)
						i = i + 1
					end
					updateNeopixels()
					counter = counter + 1
					if (counter == maxcount) counter = 0
			end
		}	
		
		state PULSE {
		
			property counter : UInt8 = 0
			readonly property maxcount: UInt8 = 100
			
			on entry do
			/*
				var i : UInt8 = neopixel_ring_first
				var color : UInt32 = getColor(l_color_r, l_color_g, l_color_b)
				while(i <= neopixel_ring_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
			
			*/
			end
			
			transition -> OFF event ctrl?off
			
			
	
			internal event clock?fps_clock action do
				var bright : UInt8 = pulse_brightness(counter)
				var color : UInt32 = getColor((color_r*bright)/256, (color_g*bright)/256, (color_b*bright)/256)
				var i : UInt8 = neopixel_ring_first
				while(i <= neopixel_ring_last) do
					setPixelColor(i, color)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
		}	
		
		
		state BLINKALL {
		
			property counter : UInt8 = 0
			readonly property maxcount: UInt8 = 22
			
			transition -> OFF event ctrl?off

			internal event clock?fps_clock action do
				var bright : UInt8 = blink_brightness(counter)
				var rcolor : UInt32 = getColor((color_r*bright)/256, (color_g*bright)/256, (color_b*bright)/256)
				var i : UInt8 = neopixel_ring_first
				while(i <= neopixel_ring_last) do
					setPixelColor(i, rcolor)
					i = i + 1
				end
				var lcolor : UInt32 = getColor((l_color_r*bright)/256, (l_color_g*bright)/256, (l_color_b*bright)/256)
				i = neopixel_logo_first
				while(i <= neopixel_logo_last) do
					setPixelColor(i, lcolor)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
		}	
		
		state BLINKLOGO {
		
			property counter : UInt8 = 0
			readonly property maxcount: UInt8 = 22
			
			on entry do
				var rcolor : UInt32 = getColor(color_r, color_g, color_b)
				var i : UInt8 = neopixel_ring_first
				while(i <= neopixel_ring_last) do
					setPixelColor(i, rcolor)
					i = i + 1
				end
				updateNeopixels()
			end
			
			transition -> OFF event ctrl?off

			internal event clock?fps_clock action do
				var bright : UInt8 = blink_brightness(counter)
				var lcolor : UInt32 = getColor((l_color_r*bright)/256, (l_color_g*bright)/256, (l_color_b*bright)/256)
				var i : UInt8 = neopixel_logo_first
				while(i <= neopixel_logo_last) do
					setPixelColor(i, lcolor)
					i = i + 1
				end
				updateNeopixels()
				counter = counter + 1
				if (counter == maxcount) counter = 0
			end
		}	
		
	}
}

thing fragment NeoPixelNotifierGWClient includes NeoPixelNotifierGWMsgs {
	
	required port neopixels {
		sends setColor, setLogoColor, setRingColor, off, pulse, rotate, breath, solid, blink, blink_logo
	}
	
	function neo_standby() do
		neopixels!off()
		neopixels!setColor(0, 50, 255)
		neopixels!breath()
	end
	
	function neo_requested() do
		neopixels!off()
		neopixels!setColor(0, 255, 96)
		//neopixels!setRingColor(0, 255, 64)
		neopixels!pulse()
	end
	
	function neo_measuring1() do
		neopixels!off()
		neopixels!setColor(255, 32, 0)
		neopixels!rotate(12)
	end
	
	function neo_measuring2() do
		neopixels!off()
		neopixels!setColor(160, 140, 0)
		neopixels!rotate(-2)
	end
	
	function neo_bluetooth() do
		neopixels!off()
		neopixels!setColor(0, 40, 255)
		neopixels!blink()
	end
	
	function neo_gateway_ack() do
		neopixels!off()
		neopixels!setRingColor(0, 255, 40)
		neopixels!blink_logo()
	end
	
	function neo_gateway_error() do
		neopixels!off()
		neopixels!setColor(255, 40, 0)
		neopixels!solid()
	end
	
	function neo_tellucloud_ack() do
		neopixels!off()
		neopixels!setLogoColor(0, 255, 40)
		neopixels!solid()
	end
	
	function neo_tellucloud_error() do
		neopixels!off()
		neopixels!setLogoColor(255, 40, 0)
		neopixels!solid()
	end
	
	function neo_solid(r : UInt8, g : UInt8, b : UInt8) do
		neopixels!off()
		neopixels!setColor(r, g, b)
		neopixels!solid()
	end
}


thing NeoPixelNotifierGWTest includes NeoPixelNotifierGWClient, TimerMsgs {
	
	required port clock {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
	
	statechart Test init MEASURE {
		
		state TEST {
			on entry neo_bluetooth()
		}
		
		state GREEN {
			on entry do neo_solid(0,255,32) clock!timer_start(0,2000) end
			transition -> OFF event clock?timer_timeout
		}
		
		state OFF {
			on entry do neopixels!off() clock!timer_start(0,500) end
			transition -> BREATH event clock?timer_timeout
		}
		
		state BREATH {
			on entry do neo_standby() clock!timer_start(0,7000) end
			transition -> PULSE event clock?timer_timeout
		}
		
		state PULSE {
			on entry do neo_requested() clock!timer_start(0,7000) end
			transition -> PUMP event clock?timer_timeout
		}
		
		state PUMP {
			on entry do neo_measuring1() clock!timer_start(0,3000) end
			transition -> MEASURE event clock?timer_timeout
		}
		
		state MEASURE {
			on entry do neo_measuring2() clock!timer_start(0,3000) end
			transition -> BLINK event clock?timer_timeout
		}
		state BLINK {
			on entry do neo_bluetooth() clock!timer_start(0,4000) end
			transition -> GWOK event clock?timer_timeout
		}
		state GWOK {
			on entry do neo_gateway_ack() clock!timer_start(0,3000) end
			transition -> TELLUERR event clock?timer_timeout
		}
		state TELLUERR {
			on entry do neo_tellucloud_error() clock!timer_start(0,3000) end
			transition -> GREEN event clock?timer_timeout
		}
	}
}


configuration TestNeoPixelNotifierGW {
	
	instance neo : NeoPixelNotifierGW
	connector neo.clock over Timer
	
	set neo.neopixel_pin = 7
	set neo.neopixel_total_count = 3
	set neo.neopixel_logo_first = 1
	set neo.neopixel_logo_last = 2
	set neo.neopixel_ring_first = 0
	set neo.neopixel_ring_last = 0
	
	instance test : NeoPixelNotifierGWTest
	connector test.neopixels => neo.ctrl
	connector test.clock over Timer

}
