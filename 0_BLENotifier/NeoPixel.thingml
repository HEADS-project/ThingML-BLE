import "_Datatypes.thingml"

thing fragment NeoPixelMsgs {
	message setColor(red : UInt8, green : UInt8, blue : UInt8);
}

thing NeoPixel includes NeoPixelMsgs
@c_global "
#include <Adafruit_NeoPixel.h>
Adafruit_NeoPixel strip;

#define BREATH_LEN 31
//uint8_t breath[] = {0, 1, 2, 3, 5, 8, 11, 14, 18, 23, 29, 36, 43, 52, 61, 72, 83, 96, 110, 124, 140, 155, 171, 186, 202, 216, 228, 238, 247, 252, 255};

uint8_t breath[] = {25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 29, 36, 43, 52, 61, 72, 83, 96, 110, 124, 140, 155, 171, 186, 202, 216, 228, 238, 247, 252, 255};

#define PULSE_LEN 40
uint8_t pulse[] =  {32, 32, 40, 50, 55, 50, 32, 32, 32, 20, 10, 20, 40, 80, 160, 230, 255, 230, 160, 80, 40, 20, 10, 5, 2, 0, 6, 16, 30, 32, 32, 40, 48, 55, 60, 50, 36, 32, 32, 32};


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

"
{ 
	property neopixel_pin : UInt8 = 7
	property neopixel_count : UInt8 = 10
	
	message update() @xms_tic "33";
	
	provided port ctrl {
		receives setColor
	}
	
	required port clock {
		receives update
	}
	
	function setPixelColor(pixel : UInt8, color: UInt32) do
		'strip.setPixelColor('&pixel&', '&color&');'
	end 
	
	function getColor(red : UInt8, green : UInt8, blue : UInt8) : UInt32 do
		return 'strip.Color('&red&', '&green&', '&blue&')'
	end
	
	function updateNeopixels() do
		'strip.show();'
		
	end
	
	function initializeNeopixels() do
		'strip = Adafruit_NeoPixel('&neopixel_count&', '&neopixel_pin&', NEO_GRB + NEO_KHZ800);
		 strip.begin();
		 strip.setBrightness(255);
		 strip.show();'
	end

	statechart NeoPixelStateChart init RUN {
	
		property color_r : UInt8 = 255
		property color_g : UInt8 = 75
		property color_b : UInt8 = 0
		
		property counter : UInt8 = 0
		property countup : Boolean = true
	
		on entry initializeNeopixels()
		
		internal event c:ctrl?setColor action do 
			color_r = c.red
			color_g = c.green
			color_b = c.blue
		end
	
		state RUN {
		/*
				transition -> RUN event clock?update guard false action do
					var color : UInt32 = getColor(color_r, color_g, color_b)
					var i : UInt8 = 0
					while(i < neopixel_count) do
						if (i == counter or i == (counter + neopixel_count/2) % neopixel_count) setPixelColor(i, color)
						else setPixelColor(i, 0)
						i = i + 1
					end
					updateNeopixels()
					counter = (counter + 1) % neopixel_count
				end
				*/
				transition -> RUN event clock?update action do
					
					if (countup) do
						var bright : UInt8 = 'pulse['&counter&']'
						var color : UInt32 = getColor((color_r*bright)/256, (color_g*bright)/256, (color_b*bright)/256)
						var i : UInt8 = 0
						while(i < neopixel_count) do
							setPixelColor(i, color)
							i = i + 1
						end
						updateNeopixels()
						if (counter < 'PULSE_LEN'-1) counter = counter + 1
						if (counter == 'PULSE_LEN'-1) countup = false
					end
					else do
						if (counter > 0) counter = counter - 1
						if (counter == 0) countup = true
					end 
					
				end
		}	
	}
}

protocol Timer;

configuration TestNeoPixels {

	instance neo : NeoPixel
	connector neo.clock over Timer

}
