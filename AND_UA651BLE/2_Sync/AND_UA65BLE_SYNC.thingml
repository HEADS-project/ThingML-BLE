import "Datatypes.thingml"
import "ExitHandler.thingml"
import "BLE_initialiser.thingml"
import "BLE_connecter.thingml"
import "BLE_bloodpressure.thingml"
import "BLE_notifier.thingml"
import "HCISocketImpl.thingml"


thing fragment MqttMsgs
{
  message TelluCloudBloodPressure(observationTime : DateTime, health_pressure_diastolic : Int, health_pressure_mean : Int, health_pressure_systolic : Int, health_pulseRate : Int) @tellucloud_type "observation";
  message MqttRequestBloodPressureMeasurement();
  message MqttConfirmBloodPressureMeasurement();
}

thing Main includes BLEInitialiser, BLEBloodpressure, BLENotifier, ExitHandlerMsgs, BLEConnecterMsgs, MqttMsgs
@c_header "#include <time.h>"
{
  required port Signals
  {
    receives Interrupt
    sends Quit
  }

  /* Connecter instances for Blood Pressure device and LED Notifier device */
  required port BloodPressureDevice
  {
    sends Connect, Stop, Encrypt
    receives Connected, Stopped, Failure, Encrypted
  }
  required port NotifierDevice
  {
    sends Connect, Stop, Encrypt
    receives Connected, Stopped, Failure, Encrypted
  }

  /* MQTT messages */
  required port BloodPressureCloud
  {
    sends TelluCloudBloodPressure
    receives MqttRequestBloodPressureMeasurement, MqttConfirmBloodPressureMeasurement
  }

  property SendToNotifier : Byte = '0x00'

  statechart States init Initialise
  {
    // Initialise HCI socket and BLE controller
    state Initialise
    {
      on entry Initialiser!Start()

      transition -> Standby event Initialiser?DeviceInitialised

      transition -> Failed event Initialiser?Failure
      transition -> Quit event Signals?Interrupt
    }

    // Main logic
    composite state Standby init SyncBloodPressure
    {
      composite state SyncBloodPressure init ConnectBP
      {
        state ConnectBP
        {
          on entry do
            print "[INFO]: Connecting to Blood Pressure Monitor...\n"
            BloodPressureDevice!Connect()
          end

          transition -> ConnectedBP event BloodPressureDevice?Encrypted
          
          internal event e:BloodPressureCloud?MqttRequestBloodPressureMeasurement action do
            SendToNotifier = '0x01'
            BloodPressureDevice!Stop()
          end
          internal event e:BloodPressureCloud?MqttConfirmBloodPressureMeasurement action do
            SendToNotifier = '0x02'
            BloodPressureDevice!Stop()
          end
        }

        state ConnectedBP
        {
          property GotMeasurements : Boolean
          property MeasurementOK : Boolean
          
          on entry do
            GotMeasurements = false
            MeasurementOK = false
          end
          
          internal event e:Bloodpressure?BloodPressureMeasurement action do
            GotMeasurements = true
            MeasurementOK = '!isnan('&e.Systolic&')'
            
            if (MeasurementOK) do
              var ObservationTime : DateTime = 0
              var HealthPressureDiastolic : Int = e.Diastolic
              var HealthPressureMean : Int = e.MeanArterial
              var HealthPressureSystolic : Int = e.Systolic
              var HealthPulseRate : Int = e.Pulse
              '
                printf("%i.%i.%i ", '&e.Year&', '&e.Month&', '&e.Day&');
                printf("%i:%i:%i\n", '&e.Hour&', '&e.Minute&', '&e.Second&');
              '
              // Convert date time
              '
                struct tm timebuf;
                timebuf.tm_year = '&e.Year&'-1900;
                timebuf.tm_mon = '&e.Month&'-1;
                timebuf.tm_mday = '&e.Day&';
                timebuf.tm_hour = '&e.Hour&';
                timebuf.tm_min = '&e.Minute&';
                timebuf.tm_sec = '&e.Second&';
              '
              ObservationTime = 'timegm(&timebuf)'
            
              BloodPressureCloud!TelluCloudBloodPressure(ObservationTime, HealthPressureDiastolic, HealthPressureMean, HealthPressureSystolic, HealthPulseRate)
            end
          end
          //message BloodPressureMeasurement(Systolic : Float, Diastolic : Float, MeanArterial : Float, UnitKPA : Boolean, Year : UInt, Month : Byte, Day : Byte, Hour : Byte, Minute : Byte, Second : Byte, Pulse : Float, IrregularPulse : Boolean);

          transition -> ConnectBP event BloodPressureDevice?Stopped guard (not GotMeasurements) action do
            print "[WARNING]: Finished syncing with Blood Pressure Monitor but got no measurements!\n"
          end
          
          internal event BloodPressureDevice?Stopped guard (GotMeasurements and SendToNotifier == '0x00') action do
            print "[INFO]: Finished syncing with Blood Pressure Monitor.\n"
            if (MeasurementOK) do
              SendToNotifier = '0x04'
            end else do
              SendToNotifier = '0x03'
            end
            BloodPressureDevice!Stop()
          end
        }

        transition -> SendToNotifier event BloodPressureDevice?Stopped guard (SendToNotifier != '0x00')
      }

      
      composite state SendToNotifier init ConnectN
      {
        state ConnectN
        {
          on entry do
            print "[INFO]: Connecting to Notifier ...\n"
            NotifierDevice!Connect()
          end

          transition -> ConnectedN event Notifications?ReadyForNotificationCommand
        }

        state ConnectedN
        {
          on entry do
            if (SendToNotifier == '0x01') do
              print "[INFO]: NOTIFIER - request\n"
              Notifications!RequestBloodPressureMeasurement()
            end
            if (SendToNotifier == '0x02') do
              print "[INFO]: NOTIFIER - stored\n"
              Notifications!StoredBloodPressureMeasurement()
            end
            if (SendToNotifier == '0x03') do
              print "[INFO]: NOTIFIER - bad\n"
              Notifications!BadBloodPressureMeasurement()
            end
            if (SendToNotifier == '0x04') do
              print "[INFO]: NOTIFIER - received\n"
              Notifications!ReceivedBloodPressureMeasurement()
            end
            SendToNotifier = '0x00'
          end
        }

        transition -> SyncBloodPressure event NotifierDevice?Stopped
        transition -> SyncBloodPressure event NotifierDevice?Failure
      }

      transition -> Deinitialise event Signals?Interrupt
      transition -> Failed event Initialiser?Failure
    }

    // Close everything
    state Deinitialise
    {
      on entry do
        print "[INFO]: Stopping...\n"
        BloodPressureDevice!Stop()
      end

      internal event BloodPressureDevice?Stopped action NotifierDevice!Stop()
      internal event NotifierDevice?Stopped action Initialiser!Stop()

      transition -> Quit event Initialiser?Stopped

      transition -> Failed event BloodPressureDevice?Failure
      transition -> Failed event NotifierDevice?Failure
      transition -> Failed event Initialiser?Failure

      transition -> Failed event Signals?Interrupt
    }

    // Failed somewhere
    state Failed
    {
      on entry do
        print "[ERROR]: Failed, quitting... !!!\n"
        Signals!Quit(1)
      end
    }

    // Normal QUIT
    state Quit // TODO How do we want to quit?
    {
      on entry do
        print "[INFO]: Finished, quitting...\n"
        Signals!Quit(0)
      end
    }
  }
}

protocol MQTT1 @serializer "PosixTelluCloudSerializerPlugin"
  @mqtt_broker_address "mqtt.tellucloud.com" @trace_level "2"
  @mqtt_publish_topic "5C:31:3E:03:54:2F/smarttracker/health.pressure"
  @mqtt_subscribe_topic "5C:31:3E:03:54:2F/MqttRequestBloodPressureMeasurement";

configuration AND_UA651BLE_SYNC
@add_c_libraries "bluetooth"
@c_header "
  ble_random_number_t peer_ltk = { 0x4D, 0xED, 0x37, 0xB5, 0x6C, 0x94, 0x4D, 0xEE, 0xD7, 0x35, 0x5A, 0xDC, 0x52, 0x3A, 0x82, 0xFC, };
  uint16_t peer_ediv = 0x9B20;
  ble_random_part_t peer_random = { 0xDE, 0x29, 0x2A, 0x99, 0x19, 0xDE, 0x56, 0xCA, };
  
  notifier_cmd_t request_cmd  = { 2, '!', 'R' };
  notifier_cmd_t received_cmd = { 2, '!', 'G' };
  notifier_cmd_t error_cmd    = { 2, '!', 'E' };
  notifier_cmd_t stored_cmd   = { 2, '!', 'S' };
"  
{
  instance handler : ExitHandler
  instance hci     : HCISocketProxyImpl

  instance main : Main

  instance initialiser            : BLEInitialiserImpl
  instance connecterbloodpressure : BLEConnecterImpl
  instance connecternotifier      : BLEConnecterImpl
  instance bloodpressure          : BLEBloodpressureImpl
  instance notifier               : BLENotifierImpl



  connector main.Signals => handler.Signals
  connector main.Initialiser => initialiser.Initialiser
  connector main.BloodPressureDevice => connecterbloodpressure.Connecter
  connector main.Bloodpressure => bloodpressure.Bloodpressure
  connector main.NotifierDevice => connecternotifier.Connecter
  connector main.Notifications => notifier.Notifications

  connector initialiser.Socket => hci.Socket
  connector initialiser.HCICommands => hci.Commands
  connector initialiser.HCIEvents => hci.Events

  connector connecterbloodpressure.Socket => hci.Socket
  connector connecterbloodpressure.HCICommands => hci.Commands
  connector connecterbloodpressure.HCIEvents => hci.Events

  connector connecternotifier.Socket => hci.Socket
  connector connecternotifier.HCICommands => hci.Commands
  connector connecternotifier.HCIEvents => hci.Events

  connector bloodpressure.ATT => hci.ATT
  connector bloodpressure.Connecter => connecterbloodpressure.Connecter

  connector notifier.ATT => hci.ATT
  connector notifier.Connecter => connecternotifier.Connecter
  
  set notifier.RequestCommand  = 'request_cmd'
  set notifier.ReceivedCommand = 'received_cmd'
  set notifier.ErrorCommand    = 'error_cmd'
  set notifier.StoredCommand   = 'stored_cmd'
  
  /* ----- BLE CONNECTION PARAMETERS ----- */
  set hci.Device = "B8:27:EB:03:FA:CD"

  set connecterbloodpressure.ConnectAddressType = BLEAddressType:PUBLIC
  set connecterbloodpressure.ConnectAddress = "5C:31:3E:03:54:2F"
  connector main.BloodPressureCloud over MQTT1 @tellucloud_deviceid "5C:31:3E:03:54:2F"

  set connecterbloodpressure.LongTermKey = 'peer_ltk'
  set connecterbloodpressure.EncryptedDiversifier = 'peer_ediv'
  set connecterbloodpressure.RandomNumber = 'peer_random'

  set connecternotifier.ConnectAddressType = BLEAddressType:RANDOM
  set connecternotifier.ConnectAddress = "D8:1A:59:61:FC:67"  
}
