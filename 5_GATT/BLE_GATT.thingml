import "ExitHandler.thingml"
import "BLE_initialiser.thingml"
import "BLE_connecter.thingml"
import "BLE_gattproxy.thingml"

thing Main includes BLEInitialiser, BLEConnecter, GATT, ExitHandlerMsgs, UUIDFunctions
{
  required port Signals {
    receives Interrupt
    sends Quit
  }

  /* ---------- Pairing process results ---------- */
  /*
  property OwnLongTermKey : BLERandomNumber = 'a'
  property OwnEncryptedDiversifier : UInt = 'b'
  property OwnRandomNumber : BLERandomPart = 'c'
  property OwnIdentityResolvingKey : BLERandomNumber = 'd'
  property OwnAddressType : BLEAddressType = 'e'
  property OwnAddress : BTAddress = 'f'
  */
  property PeerLongTermKey : BLERandomNumber = 'g'
  property PeerEncryptedDiversifier : UInt = 'h'
  property PeerRandomNumber : BLERandomPart = 'i'
  property PeerIdentityResolvingKey : BLERandomNumber = 'j'
  property PeerAddressType : BLEAddressType = 'k'
  property PeerAddress : BTAddress = 'l'
  /* --------------------------------------------- */

  property DeviceAddress : BTAddress
  property ConnectedHandle : UInt


  /* List of services discovered */
  property ServicesLength : Byte = 0
  property ServiceStartHandles : UInt[10]
  property ServiceEndHandles : UInt[10]
  property ServiceTypes : UUID[10]
  /* List of characteristics discovered */
  property CharacteristicsLength : Byte = 0
  property CharacteristicProperties : Byte[100]
  property CharacteristicHandles : UInt[100]
  property CharacteristicValueHandles : UInt[100]
  property CharacteristicTypes : UUID[100]
  /* List of characteristic descroptors discovered */
  property DescriptorsLength : Byte = 0
  property DescriptorHandles : UInt[20]
  property DescriptorTypes : UUID[20]


  statechart States init Initialise
  {
    // Initialise HCI socket and BLE controller
    state Initialise
    {
      on entry Initialiser!Start()

      transition -> Connect event e:Initialiser?DeviceInitialised action DeviceAddress = e.Address

      transition -> Failed event Initialiser?Failure
      transition -> Quit event Signals?Interrupt
    }

    // Start connection to device and encrypt connection
    state Connect
    {
      on entry Connecter!Connect()
      internal event e:Connecter?Connected action do
        ConnectedHandle = e.Handle
        //Connecter!Encrypt(OwnRandomNumber, OwnEncryptedDiversifier, OwnLongTermKey)
        Connecter!Encrypt(PeerRandomNumber, PeerEncryptedDiversifier, PeerLongTermKey)
      end

      transition -> Discover event e:Connecter?Encrypted

      transition -> Failed event Initialiser?Failure
      transition -> Failed event Connecter?Failure
      transition -> Failed event Connecter?Stopped
      transition -> Disconnect event Signals?Interrupt
    }

    // Perform GATT Discovery
    composite state Discover init Services
    {
      property DiscoveryDone : Boolean
      on entry do
        DiscoveryDone = false
      end

      state Services
      {
        on entry GATT!GATTDiscoverAllPrimaryServices()
        transition -> Characteristics event e:GATT?GATTPrimaryServiceDiscoveryDone

        internal event e:GATT?GATTPrimaryServiceDiscovered action do
          if (ServicesLength < 10) do
            ServiceStartHandles[ServicesLength] = e.StartHandle
            ServiceEndHandles[ServicesLength] = e.EndHandle
            ServiceTypes[ServicesLength] = e.Type
            ServicesLength = ServicesLength+1
          end

          print "[INFO]: Found service with UUID: "
          PrintUUID(e.Type)
        end
      }

      state Characteristics
      {
        property Index : Byte

        on entry do
          Index = 0
          var StartHandle : UInt = ServiceStartHandles[Index]
          var EndHandle : UInt = ServiceEndHandles[Index]
          GATT!GATTDiscoverServiceCharacteristics(StartHandle, EndHandle)
        end

        internal event e:GATT?GATTServiceCharacteristicDiscovered action do
          if (CharacteristicsLength < 100) do
            CharacteristicProperties[CharacteristicsLength] = e.Properties
            CharacteristicHandles[CharacteristicsLength] = e.DeclarationHandle
            CharacteristicValueHandles[CharacteristicsLength] = e.ValueHandle
            CharacteristicTypes[CharacteristicsLength] = e.Type
            CharacteristicsLength = CharacteristicsLength+1
          end

          print "[INFO]: Found characteristic with UUID: "
          PrintUUID(e.Type)
        end

        internal event GATT?GATTServiceChararacteristicDiscoveryDone action do
          Index = Index+1
          if (Index < ServicesLength) do
            var StartHandle : UInt = ServiceStartHandles[Index]
            var EndHandle : UInt = ServiceEndHandles[Index]
            GATT!GATTDiscoverServiceCharacteristics(StartHandle, EndHandle)
          end
        end

        transition -> Descriptors guard (Index == ServicesLength)
      }

      state Descriptors
      {
        property RangeIndex : Byte
        property RangeLength : Byte
        property RangeStart : UInt[50]
        property RangeStop : UInt[50]

        on entry do
          RangeLength = 0
          var Index : Byte = 0
          var ServiceIndex : Byte = 1
          var NextServiceHandle : UInt = 0
          var NextHandle : UInt = 0
          // Find handle ranges where there could be descriptors
          while (Index < CharacteristicsLength-1) do
            // Find Next service start handle
            if (CharacteristicValueHandles[Index] > ServiceStartHandles[ServiceIndex]) do
              ServiceIndex = ServiceIndex+1
            end
            if (ServiceIndex < ServicesLength) do
              NextServiceHandle = ServiceStartHandles[ServiceIndex]
            end else do
              NextServiceHandle = '0xFFFF'
            end
            // Check if there is some spare room to next characteristic value declaration or service declaration
            NextHandle = CharacteristicValueHandles[Index]+1
            if (NextHandle < NextServiceHandle and NextHandle < CharacteristicHandles[Index+1]) do
              RangeStart[RangeLength] = NextHandle
              if (NextServiceHandle > CharacteristicHandles[Index+1]) do
                RangeStop[RangeLength] = CharacteristicHandles[Index+1]-1
              end else do
                RangeStop[RangeLength] = NextServiceHandle-1
              end
              RangeLength = RangeLength+1
            end

            Index = Index+1
          end
          // Last handle, is there more left in the end?
          NextHandle = CharacteristicValueHandles[CharacteristicsLength-1]+1
          NextServiceHandle = ServiceEndHandles[ServicesLength-1]
          if (NextHandle <= NextServiceHandle) do
            RangeStart[RangeLength] = NextHandle
            RangeStop[RangeLength] = NextServiceHandle
            RangeLength = RangeLength+1
          end

          // If there are any possibilities, check if there are any descriptors there
          if (RangeLength > 0) do
            RangeIndex = 0
            GATT!GATTDiscoverCharacteristicDescriptors(RangeStart[RangeIndex], RangeStop[RangeIndex])
          end else do
            DiscoveryDone = true
          end
        end

        internal event e:GATT?GATTCharacteristicDescriptorDiscovered action do
          if (DescriptorsLength < 20) do
            DescriptorHandles[DescriptorsLength] = e.Handle
            DescriptorTypes[DescriptorsLength] = e.Type
            DescriptorsLength = DescriptorsLength+1
          end

          print "[INFO]: Found descriptor with UUID: "
          PrintUUID(e.Type)
        end

        internal event GATT?GATTCharacteristicDescriptorDiscoveryDone action do
          RangeIndex = RangeIndex+1
          if (RangeIndex < RangeLength) do
            GATT!GATTDiscoverCharacteristicDescriptors(RangeStart[RangeIndex], RangeStop[RangeIndex])
          end else do
            DiscoveryDone = true
          end
        end
      }

      transition -> Disconnect guard (DiscoveryDone)

      transition -> Failed event Initialiser?Failure
      transition -> Failed event Connecter?Failure
      transition -> Failed event Connecter?Stopped
      transition -> Disconnect event Signals?Interrupt
    }

    // Disconnect
    state Disconnect
    {
      on entry Connecter!Stop()

      internal event Connecter?Stopped action Initialiser!Stop()

      transition -> Failed event Connecter?Failure
      transition -> Failed event Initialiser?Failure
      transition -> Quit event Initialiser?Stopped
      transition -> Failed event Signals?Interrupt
    }

    // Failed somewhere
    state Failed
    {
      on entry do
        print "[ERROR]: Failed, quitting... !!!\n"
        Signals!Quit(1)
      end
    }

    // Normal QUIT
    state Quit
    {
      on entry do
        print "[INFO]: Finished, quitting...\n"

        // Print results
        print "\nResults of discovery:\n\n"

        var ServiceIndex : Byte = 0
        var CharacteristicIndex : Byte = 0
        var DescriptorIndex : Byte = 0

        while (ServiceIndex < ServicesLength) do
          print "\tService "
          'printf("[0x%4.4X-0x%4.4X] : ", '&ServiceStartHandles[ServiceIndex]&', '&ServiceEndHandles[ServiceIndex]&');'
          PrintUUID(ServiceTypes[ServiceIndex])

          while (CharacteristicIndex < CharacteristicsLength and CharacteristicValueHandles[CharacteristicIndex] <= ServiceEndHandles[ServiceIndex]) do
            print "\t\tCharacteristic "
            'printf("[0x%4.4X->0x%4.4X] (0x%2.2X) : ", '&CharacteristicHandles[CharacteristicIndex]&', '&CharacteristicValueHandles[CharacteristicIndex]&', '&CharacteristicProperties[CharacteristicIndex]&');'
            PrintUUID(CharacteristicTypes[CharacteristicIndex])

            CharacteristicIndex = CharacteristicIndex+1

            while (DescriptorIndex < DescriptorsLength and (CharacteristicIndex == CharacteristicsLength or DescriptorHandles[DescriptorIndex] < CharacteristicHandles[CharacteristicIndex])) do
              print "\t\tDescriptor "
              'printf("[0x%4.4X] : ", '&DescriptorHandles[DescriptorIndex]&');'
              PrintUUID(DescriptorTypes[DescriptorIndex])

              DescriptorIndex = DescriptorIndex+1
            end

          end

          ServiceIndex = ServiceIndex+1
        end

        Signals!Quit(0)
      end
    }
  }
}



configuration BLE_GATT
@add_c_libraries "bluetooth"
@c_header "
  ble_random_number_t g = { 0x33, 0x46, 0xCC, 0x17, 0x3F, 0x56, 0xBC, 0x52, 0xF4, 0xB2, 0x90, 0xC4, 0x0E, 0xEF, 0x43, 0x05, };
  uint16_t h = 0xF7B3;
  ble_random_part_t i = { 0xD0, 0xC4, 0x4A, 0x1F, 0x57, 0x36, 0xF2, 0xBC, };
  ble_random_number_t j = { 0x50, 0xC5, 0x01, 0xFC, 0xF0, 0x43, 0x93, 0xC4, 0x3D, 0xAC, 0xDF, 0xD2, 0x39, 0x59, 0x3F, 0x51, };
  uint8_t k = 0x00;
  bdaddr_t l = { 0x2F, 0x54, 0x03, 0x3E, 0x31, 0x5C, };
"
{
  instance handler      : ExitHandler
  instance hci          : HCISocketProxyImpl

  instance initialiser  : BLEInitialiserImpl
  instance connecter    : BLEConnecterImpl
  instance gatt         : GATTProxy

  instance main         : Main



  connector main.Signals => handler.Signals
  connector main.Initialiser => initialiser.Initialiser
  connector main.Connecter => connecter.Connecter
  connector main.GATT => gatt.GATT

  connector initialiser.Socket => hci.Socket
  connector initialiser.HCICommands => hci.Commands
  connector initialiser.HCIEvents => hci.Events

  connector connecter.Socket => hci.Socket
  connector connecter.HCICommands => hci.Commands
  connector connecter.HCIEvents => hci.Events

  connector gatt.Connecter => connecter.Connecter
  connector gatt.ATT => hci.ATT



  set hci.Device = "B8:27:EB:03:FA:CD"
  //set hci.Device = "B8:27:EB:F1:1D:FF"
  
  set connecter.ConnectAddressType = BLEAddressType:PUBLIC
  set connecter.ConnectAddress = "5C:31:3E:03:54:2F"
}
