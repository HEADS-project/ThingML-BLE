import "ExitHandler.thingml"
import "BLE_initialiser.thingml"
import "BLE_connecter.thingml"

thing Main includes BLEInitialiser, BLEConnecter, ExitHandlerMsgs
{
  required port Signals {
    receives Interrupt
    sends Quit
  }

  /* ---------- Pairing process results ---------- */
  property OwnLongTermKey : BLERandomNumber = 'a'
  property OwnEncryptedDiversifier : UInt = 'b'
  property OwnRandomNumber : BLERandomPart = 'c'
  property OwnIdentityResolvingKey : BLERandomNumber = 'd'
  property OwnAddressType : BLEAddressType = 'e'
  property OwnAddress : BTAddress = 'f'

  property PeerLongTermKey : BLERandomNumber = 'g'
  property PeerEncryptedDiversifier : UInt = 'h'
  property PeerRandomNumber : BLERandomPart = 'i'
  property PeerIdentityResolvingKey : BLERandomNumber = 'j'
  property PeerAddressType : BLEAddressType = 'k'
  property PeerAddress : BTAddress = 'l'
  /* --------------------------------------------- */

  property DeviceAddress : BTAddress
  property ConnectedHandle : UInt


  statechart States init Initialise
  {
    // Initialise HCI socket and BLE controller
    state Initialise
    {
      on entry Initialiser!Start()

      transition -> Connect event e:Initialiser?DeviceInitialised action DeviceAddress = e.Address

      transition -> Failed event Initialiser?Failure
      transition -> Quit event Signals?Interrupt
    }

    // Start connection to device and encrypt connection
    state Connect
    {
      on entry Connecter!Connect()
      internal event e:Connecter?Connected action do
        ConnectedHandle = e.Handle
        //Connecter!Encrypt(OwnRandomNumber, OwnEncryptedDiversifier, OwnLongTermKey)
        Connecter!Encrypt(PeerRandomNumber, PeerEncryptedDiversifier, PeerLongTermKey)
      end

      //transition -> Discover event e:Connecter?Encrypted
      transition -> Disconnect event e:Connecter?Encrypted action print "!!! DO DISCOVERY HERE !!!\n"

      transition -> Failed event Initialiser?Failure
      transition -> Failed event Connecter?Failure
      transition -> Failed event Connecter?Stopped
      transition -> Disconnect event Signals?Interrupt
    }

    // Perform GATT Discovery
    state Discover
    {
      on entry do
        print "!!! DO DISCOVERY !!!\n"
      end
    }

    // Disconnect
    state Disconnect
    {
      on entry Connecter!Stop()

      internal event Connecter?Stopped action Initialiser!Stop()

      transition -> Failed event Connecter?Failure
      transition -> Failed event Initialiser?Failure
      transition -> Quit event Initialiser?Stopped
      transition -> Failed event Signals?Interrupt
    }

    // Failed somewhere
    state Failed
    {
      on entry do
        print "[ERROR]: Failed, quitting... !!!\n"
        Signals!Quit(1)
      end
    }

    // Normal QUIT
    state Quit
    {
      on entry do
        print "[INFO]: Finished, quitting...\n"
        Signals!Quit(0)
      end
    }
  }
}



configuration BLE_GATT
@add_c_libraries "bluetooth"
@c_header "
  ble_random_number_t a = { 0x5D, 0x9E, 0x5A, 0x3F, 0xF8, 0x4C, 0xCB, 0x25, 0x1F, 0x6B, 0xC3, 0x58, 0x9B, 0xB1, 0xB2, 0x66, };
  uint16_t b = { 0x58, 0xA5, };
  ble_random_part_t c = { 0x60, 0xF3, 0x2F, 0x4E, 0xF9, 0x71, 0x55, 0xBA, };
  ble_random_number_t d = { 0xBF, 0xD2, 0x55, 0x69, 0x8F, 0xEB, 0x0A, 0x80, 0x7F, 0x2E, 0xC4, 0xED, 0x2A, 0x88, 0xFF, 0x1B, };
  uint8_t e = { 0x00, };
  bdaddr_t f = { 0xCD, 0xFA, 0x03, 0xEB, 0x27, 0xB8, };

  ble_random_number_t g = { 0x61, 0x7D, 0xED, 0x68, 0x85, 0x0D, 0x6B, 0x63, 0xDD, 0x2D, 0xBA, 0x59, 0x54, 0x32, 0x92, 0x3C, };
  uint16_t h = { 0xAC, 0xFE, };
  ble_random_part_t i = { 0x60, 0x81, 0x9D, 0x2B, 0xBE, 0xA9, 0xD4, 0x31, };
  ble_random_number_t j = { 0x50, 0xC5, 0x01, 0xFC, 0xF0, 0x43, 0x93, 0xC4, 0x3D, 0xAC, 0xDF, 0xD2, 0x39, 0x59, 0x3F, 0x51, };
  uint8_t k = { 0x00, };
  bdaddr_t l = { 0x2F, 0x54, 0x03, 0x3E, 0x31, 0x5C, };
"
{
  instance handler      : ExitHandler
  instance hci          : HCISocketProxyImpl

  instance initialiser  : BLEInitialiserImpl
  instance connecter    : BLEConnecterImpl

  instance main         : Main



  connector main.Signals => handler.Signals
  connector main.Initialiser => initialiser.Initialiser
  connector main.Connecter => connecter.Connecter

  connector initialiser.Socket => hci.Socket
  connector initialiser.HCICommands => hci.Commands
  connector initialiser.HCIEvents => hci.Events

  connector connecter.Socket => hci.Socket
  connector connecter.HCICommands => hci.Commands
  connector connecter.HCIEvents => hci.Events



  set hci.Device = "B8:27:EB:03:FA:CD"
  //set hci.Device = "B8:27:EB:F1:1D:FF"
  
  set connecter.ConnectAddressType = BLEAddressType:PUBLIC
  set connecter.ConnectAddress = "5C:31:3E:03:54:2F"
}
