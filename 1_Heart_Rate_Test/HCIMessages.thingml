import "Datatypes.thingml"
import "HCIDatatypes.thingml"

thing fragment HCIControllerCommandMsgs
{
  /* --- BR/EDR commands --- */
  /* Controller configuration */
  message Reset();
  message ResetCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);

  message SetEventMask(Mask : HCIEventMask);
  message SetEventMaskAll();
  message SetEventMaskCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);

  message SetLocalName(Name : BluetoothLocalName);
  message SetLocalNameCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);

  /* --- LE commands --- */
  /* Controller configuration */
  message SetLEEventMask(Mask : HCIEventMask);
  message SetLEEventMaskAll();
  message SetLEEventMaskCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);

  /* Advertisement */
  message SetLEAdvertisementParameters(MinInterval : Int, MaxInterval : Int, Type : Byte, // TODO Enums in posix??



  message SetLEAdvertise();
  message SetLEAdvertiseData();
  message SetLEAdvertiseEnable(Enable : Byte);
  message SetLEScanResponseData();
  message SetLEScanParameters();
  message SetLEScanEnable(Enable : Byte);

  message SetLEAdvertiseCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);
  message SetLEAdvertiseDataCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);
  message SetLEAdvertiseEnableCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);
  message SetLEScanResponseDataCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);
  message SetLEScanParametersCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);
  message SetLEScanEnableCompleted(NumberAllowedCommandPackets : Byte, Status : Byte);

}

thing fragment HCIMsgs
{
}

thing fragment HCI includes HCIMsgs
{
  provided port Commands
  {
  }
}
