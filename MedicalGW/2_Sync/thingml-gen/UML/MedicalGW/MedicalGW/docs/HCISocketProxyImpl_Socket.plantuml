@startuml
skinparam defaultTextAlignment left
caption Behavior of thing HCISocketProxy
[*] --> Socket
state Socket{
state Closed{
	Closed : entry / CloseSocket()\n

Closed --> Opening : Socket?Open
}
state Opening{
	Opening : entry / OpenSocket()\n

Opening --> Open : [(SocketIsOpen() > 0)]\naction Socket!Opened(GetBTAddress())\n

Opening --> Closed : [(SocketIsOpen() == 0)]\naction Socket!Closed()\n
}
state Open{

Open --> Closed : [(SocketIsOpen() == 0)]\naction Socket!Closed()\n

Open --> Closed : Socket?Close\naction Socket!Closed()\n
	Open : e:Commands?Disconnect / \naction do \n'\n          disconnect_cp data;\n          data.handle = ' & Disconnect.ConnectionHandle & ';\n          data.reason = ' & Disconnect.Reason & ';\n        '\nSendCommand(...)\nend\n
	Open : Commands?Reset / \naction SendCommand(...)\n
	Open : e:Commands?SetEventMask / \naction SendCommand(...)\n
	Open : Commands?SetEventMaskAll / \naction do \nvar Mask : HCIEventMask = '{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }'\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEEventMask / \naction SendCommand(...)\n
	Open : Commands?SetLEEventMaskAll / \naction do \nvar Mask : HCIEventMask = '{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }'\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEAdvertisementParameters / \naction do \n'\n          le_set_advertising_parameters_cp data;\n          data.min_interval = ' & SetLEAdvertisementParameters.MinInterval & ';\n          data.max_interval = ' & SetLEAdvertisementParameters.MaxInterval & ';\n          data.advtype = ' & SetLEAdvertisementParameters.Type & ';\n          data.own_bdaddr_type = ' & SetLEAdvertisementParameters.OwnAddressType & ';\n          data.direct_bdaddr_type = ' & SetLEAdvertisementParameters.PeerAddressType & ';\n          data.direct_bdaddr = ' & SetLEAdvertisementParameters.PeerAddress & ';\n          data.chan_map = ' & SetLEAdvertisementParameters.Channel & ';\n          data.filter = ' & SetLEAdvertisementParameters.FilterPolicy & ';\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEAdvertisingData / \naction do \n'\n          le_set_advertising_data_cp data;\n          data.length = ' & SetLEAdvertisingData.Length & ';\n          memcpy(data.data, ' & SetLEAdvertisingData.Data & '.bytes, 31);\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEScanResponseData / \naction do \n'\n          le_set_scan_response_data_cp data;\n          data.length = ' & SetLEScanResponseData.Length & ';\n          memcpy(data.data, ' & SetLEScanResponseData.Data & '.bytes, 31);\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEAdvertiseEnable / \naction SendCommand(...)\n
	Open : e:Commands?SetLEScanParameters / \naction do \n'\n          le_set_scan_parameters_cp data;\n          data.type = ' & SetLEScanParameters.Type & ';\n          data.interval = ' & SetLEScanParameters.Interval & ';\n          data.window = ' & SetLEScanParameters.Window & ';\n          data.own_bdaddr_type = ' & SetLEScanParameters.OwnAddressType & ';\n          data.filter = ' & SetLEScanParameters.FilterPolicy & ';\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?SetLEScanEnable / \naction do \n'\n          le_set_scan_enable_cp data;\n          data.enable = ' & SetLEScanEnable.Enable & ';\n          data.filter_dup = ' & SetLEScanEnable.FilterDuplicates & ';\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?LECreateConnection / \naction do \n'\n          le_create_connection_cp data;\n          data.interval = ' & LECreateConnection.Interval & ';\n          data.window = ' & LECreateConnection.Window & ';\n          data.initiator_filter = ' & LECreateConnection.FilterPolicy & ';\n          data.peer_bdaddr_type = ' & LECreateConnection.PeerAddressType & ';\n          data.peer_bdaddr = ' & LECreateConnection.PeerAddress & ';\n          data.own_bdaddr_type = ' & LECreateConnection.OwnAddressType & ';\n          data.min_interval = ' & LECreateConnection.ConnIntervalMin & ';\n          data.max_interval = ' & LECreateConnection.ConnIntervalMax & ';\n          data.latency = ' & LECreateConnection.ConnLatency & ';\n          data.supervision_timeout = ' & LECreateConnection.SupervisionTimeout & ';\n          data.min_ce_length = ' & LECreateConnection.CELengthMin & ';\n          data.max_ce_length = ' & LECreateConnection.CELengthMax & ';\n        '\nSendCommand(...)\nend\n
	Open : Commands?LECreateConnectionCancel / \naction SendCommand(...)\n
	Open : Commands?LERand / \naction SendCommand(...)\n
	Open : e:Commands?LEEncrypt / \naction do \n'\n          ble_random_number_t data[2];\n          data[0] = ' & LEEncrypt.Key & ';\n          data[1] = ' & LEEncrypt.Plaintext & ';\n        '\nSendCommand(...)\nend\n
	Open : e:Commands?LEStartEncryption / \naction do \n'\n          uint8_t data[28];\n          *((uint16_t*)&data[0]) = ' & LEStartEncryption.ConnectionHandle & ';\n          *((ble_random_part_t*)&data[2]) = ' & LEStartEncryption.Random & ';\n          *((uint16_t*)&data[10]) = ' & LEStartEncryption.EDIV & ';\n          *((ble_random_number_t*)&data[12]) = ' & LEStartEncryption.LTK & ';\n        '\nSendCommand(...)\nend\n
	Open : e:SMP?SMPPairingRequest / \naction do \n'\n          uint8_t data[7];\n          data[0] = 0x01;\n          data[1] = ' & SMPPairingRequest.IOCapability & ';\n          data[2] = (' & SMPPairingRequest.OOBDataPresent & ') ? 0x01 : 0x00;\n          data[3] = ( ((' & SMPPairingRequest.Bonding & ') ? 0x01 : 0x00) | ((' & SMPPairingRequest.MITM & ') ? 0x04 : 0x00) | ((' & SMPPairingRequest.SecureConnection & ') ? 0x08 : 0x00) | ((' & SMPPairingRequest.Keypress & ') ? 0x10 : 0x00) );\n          data[4] = ' & SMPPairingRequest.MaximumEncryptionKeySize & ';\n          data[5] = ' & SMPPairingRequest.InitiatorKeyDistribution & ';\n          data[6] = ' & SMPPairingRequest.ResponderKeyDistribution & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingResponse / \naction do \n'\n          uint8_t data[7];\n          data[0] = 0x02;\n          data[1] = ' & SMPPairingResponse.IOCapability & ';\n          data[2] = (' & SMPPairingResponse.OOBDataPresent & ') ? 0x01 : 0x00;\n          data[3] = ( ((' & SMPPairingResponse.Bonding & ') ? 0x01 : 0x00) | ((' & SMPPairingResponse.MITM & ') ? 0x04 : 0x00) | ((' & SMPPairingResponse.SecureConnection & ') ? 0x08 : 0x00) | ((' & SMPPairingResponse.Keypress & ') ? 0x10 : 0x00) );\n          data[4] = ' & SMPPairingResponse.MaximumEncryptionKeySize & ';\n          data[5] = ' & SMPPairingResponse.InitiatorKeyDistribution & ';\n          data[6] = ' & SMPPairingResponse.ResponderKeyDistribution & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingConfirm / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x03;\n          *((ble_random_number_t*)&data[1]) = ' & SMPPairingConfirm.ConfirmValue & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingRandom / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x04;\n          *((ble_random_number_t*)&data[1]) = ' & SMPPairingRandom.RandomValue & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingFailed / \naction do \n'\n          uint8_t data[2];\n          data[0] = 0x05;\n          data[1] = ' & SMPPairingFailed.Reason & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPEncryptionInformation / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x06;\n          *((ble_random_number_t*)&data[1]) = ' & SMPEncryptionInformation.LongTermKey & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPMasterIdentification / \naction do \n'\n          uint8_t data[11];\n          data[0] = 0x07;\n          *((uint16_t*)&data[1]) = ' & SMPMasterIdentification.EDIV & ';\n          *((ble_random_part_t*)&data[3]) = ' & SMPMasterIdentification.Rand & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPIdentityInformation / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x08;\n          *((ble_random_number_t*)&data[1]) = ' & SMPIdentityInformation.IdentityResolvingKey & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPIdentityAddressInformation / \naction do \n'\n          uint8_t data[8];\n          data[0] = 0x09;\n          data[1] = ' & SMPIdentityAddressInformation.AddressType & ';\n          *((bdaddr_t*)&data[2]) = ' & SMPIdentityAddressInformation.Address & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPSigningInformation / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x0A;\n          *((ble_random_number_t*)&data[1]) = ' & SMPSigningInformation.SignatureKey & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPSecurityRequest / \naction do \n'\n          uint8_t data[2];\n          data[0] = 0x0B;\n          data[1] = ( ((' & SMPSecurityRequest.Bonding & ') ? 0x01 : 0x00) | ((' & SMPSecurityRequest.MITM & ') ? 0x04 : 0x00) | ((' & SMPSecurityRequest.SecureConnection & ') ? 0x08 : 0x00) | ((' & SMPSecurityRequest.Keypress & ') ? 0x10 : 0x00) );\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingPublicKey / \naction do \n'\n          uint8_t data[65];\n          data[0] = 0x0C;\n          *((smp_public_key_t*)&data[1]) = ' & SMPPairingPublicKey.KeyX & ';\n          *((smp_public_key_t*)&data[33]) = ' & SMPPairingPublicKey.KeyY & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPPairingDHKeyCheck / \naction do \n'\n          uint8_t data[17];\n          data[0] = 0x0D;\n          *((ble_random_number_t*)&data[1]) = ' & SMPPairingDHKeyCheck.DHKeyCheck & ';\n        '\nSendACLData(...)\nend\n
	Open : e:SMP?SMPKeypressNotification / \naction do \n'\n          uint8_t data[2];\n          data[0] = 0x0E;\n          data[1] = ' & SMPKeypressNotification.Type & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTFindInformationRequest / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x04;\n          *((uint16_t*)&data[1]) = ' & ATTFindInformationRequest.StartingHandle & ';\n          *((uint16_t*)&data[3]) = ' & ATTFindInformationRequest.EndingHandle & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTFindInformationResponse / \naction do \n'\n          uint8_t data[25];\n          data[0] = 0x05;\n          data[1] = ' & ATTFindInformationResponse.Format & ';\n          memcpy(&data[2], ' & ATTFindInformationResponse.InformationData & '.bytes, ' & ATTFindInformationResponse.InformationData & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTFindInformationError / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x01;\n          data[1] = 0x04;\n          *((uint16_t*)&data[2]) = ' & ATTFindInformationError.AttributeHandle & ';\n          data[4] = ' & ATTFindInformationError.Error & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByTypeRequest / \naction do \n'\n          uint8_t data[21];\n          data[0] = 0x08;\n          *((uint16_t*)&data[1]) = ' & ATTReadByTypeRequest.StartingHandle & ';\n          *((uint16_t*)&data[3]) = ' & ATTReadByTypeRequest.EndingHandle & ';\n          memcpy(&data[5], &' & ATTReadByTypeRequest.AttributeType & ', 16);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByTypeResponse / \naction do \n'\n          uint8_t data[25];\n          data[0] = 0x09;\n          data[1] = ' & ATTReadByTypeResponse.Length & ';\n          memcpy(&data[2], ' & ATTReadByTypeResponse.AttributeDataList & '.bytes, ' & ATTReadByTypeResponse.AttributeDataList & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByTypeError / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x01;\n          data[1] = 0x08;\n          *((uint16_t*)&data[2]) = ' & ATTReadByTypeError.AttributeHandle & ';\n          data[4] = ' & ATTReadByTypeError.Error & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadRequest / \naction do \n'\n          uint8_t data[3];\n          data[0] = 0x0A;\n          *((uint16_t*)&data[1]) = ' & ATTReadRequest.AttributeHandle & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadResponse / \naction do \n'\n          uint8_t data[24];\n          data[0] = 0x0B;\n          memcpy(&data[1], ' & ATTReadResponse.AttributeValue & '.bytes, ' & ATTReadResponse.AttributeValue & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadError / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x01;\n          data[1] = 0x0A;\n          *((uint16_t*)&data[2]) = ' & ATTReadError.AttributeHandle & ';\n          data[4] = ' & ATTReadError.Error & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByGroupTypeRequest / \naction do \n'\n          uint8_t data[21];\n          data[0] = 0x10;\n          *((uint16_t*)&data[1]) = ' & ATTReadByGroupTypeRequest.StartingHandle & ';\n          *((uint16_t*)&data[3]) = ' & ATTReadByGroupTypeRequest.EndingHandle & ';\n          memcpy(&data[5], &' & ATTReadByGroupTypeRequest.AttributeGroupType & ', 16);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByGroupTypeResponse / \naction do \n'\n          uint8_t data[25];\n          data[0] = 0x11;\n          data[1] = ' & ATTReadByGroupTypeResponse.Length & ';\n          memcpy(&data[2], ' & ATTReadByGroupTypeResponse.AttributeDataList & '.bytes, ' & ATTReadByGroupTypeResponse.AttributeDataList & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTReadByGroupTypeError / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x01;\n          data[1] = 0x10;\n          *((uint16_t*)&data[2]) = ' & ATTReadByGroupTypeError.AttributeHandle & ';\n          data[4] = ' & ATTReadByGroupTypeError.Error & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTWriteRequest / \naction do \n'\n          uint8_t data[26];\n          data[0] = 0x12;\n          *((uint16_t*)&data[1]) = ' & ATTWriteRequest.AttributeHandle & ';\n          memcpy(&data[3], ' & ATTWriteRequest.AttributeValue & '.bytes, ' & ATTWriteRequest.AttributeValue & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTWriteResponse / \naction do \n'\n          uint8_t data[1];\n          data[0] = 0x13;\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTWriteError / \naction do \n'\n          uint8_t data[5];\n          data[0] = 0x01;\n          data[1] = 0x12;\n          *((uint16_t*)&data[2]) = ' & ATTWriteError.AttributeHandle & ';\n          data[4] = ' & ATTWriteError.Error & ';\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTWriteCommand / \naction do \n'\n          uint8_t data[26];\n          data[0] = 0x52;\n          *((uint16_t*)&data[1]) = ' & ATTWriteCommand.AttributeHandle & ';\n          memcpy(&data[3], ' & ATTWriteCommand.AttributeValue & '.bytes, ' & ATTWriteCommand.AttributeValue & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTHandleValueNotification / \naction do \n'\n          uint8_t data[26];\n          data[0] = 0x1B;\n          *((uint16_t*)&data[1]) = ' & ATTHandleValueNotification.AttributeHandle & ';\n          memcpy(&data[3], ' & ATTHandleValueNotification.AttributeValue & '.bytes, ' & ATTHandleValueNotification.AttributeValue & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTHandleValueIndication / \naction do \n'\n          uint8_t data[26];\n          data[0] = 0x1D;\n          *((uint16_t*)&data[1]) = ' & ATTHandleValueIndication.AttributeHandle & ';\n          memcpy(&data[3], ' & ATTHandleValueIndication.AttributeValue & '.bytes, ' & ATTHandleValueIndication.AttributeValue & '.length);\n        '\nSendACLData(...)\nend\n
	Open : e:ATT?ATTHandleValueConfirmation / \naction do \n'\n          uint8_t data[1];\n          data[0] = 0x1E;\n        '\nSendACLData(...)\nend\n
}
[*] --> Closed
}
@enduml
