import "Datatypes.thingml"
import "HCIDatatypes.thingml"
import "DeviceMessages.thingml"
import "BLE_scanner.thingml"
import "BLE_connecter.thingml"
import "BLE_notifier.thingml"

thing ANDUA651BLE includes DeviceMsgs
{
  required port ANDUA651BLE
  {
    receives WantsToConnect, FinishedConnection
    sends AllowedToConnect
  }
}

thing ANDUA651BLEImpl includes BLEScanner, BLEConnecter, BLENotifier, DeviceMsgs, ATT
@c_header "
  #include <time.h>
  #include <math.h>
  #include <bluetooth/bluetooth.h>
"
@c_global "
  static ble_random_number_t peer_ltk = { 0x3B, 0xA0, 0x6C, 0x91, 0xDD, 0x2E, 0x8A, 0x19, 0xCB, 0xE6, 0x5F, 0xD5, 0x12, 0x3A, 0xF6, 0x4C, };
  static uint16_t peer_ediv = 0x2087;
  static ble_random_part_t peer_random = { 0xE9, 0x9B, 0x95, 0xCE, 0x1E, 0x2F, 0x06, 0x09, };

  float sfloat_to_float(uint8_t *bytes) {
    if (bytes[1] == 0x07 && bytes[0] == 0xFE) return INFINITY;
    else if (bytes[1] == 0x07 && bytes[0] == 0xFF) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x00) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x01) return NAN;
    else if (bytes[1] == 0x08 && bytes[0] == 0x02) return -INFINITY;
    else {
      int8_t exponent = ((int8_t)bytes[1]) >> 4;
      int16_t mantissa = ((int16_t)(((uint16_t)bytes[1]) << 12) >> 4) | ((uint16_t)bytes[0]);
      float f_exp = (float)exponent;
      float f_man = (float)mantissa;
      return pow(10,f_exp)*f_man;
    }
  }
"
{
  property AddressType : BLEAddressType = BLEAddressType:PUBLIC
  property Address : String = "5C:31:3E:00:4B:6B"
  property AddressBT : BTAddress
  property LongTermKey : BLERandomNumber
  property EncryptedDiversifier : UInt
  property RandomNumber : BLERandomPart
  
  property NotifierAddressType : BLEAddressType = BLEAddressType:RANDOM
  property NotifierAddress : String = "F3:48:7F:62:B8:60"
  property NotifierAddressBT : BTAddress
  
  property ConnectedHandle : UInt

  property BatteryValueHandle : UInt = '0x002B'
  property BloodPressureValueHandle : UInt = '0x0012'
  property BloodPressureConfigurationHandle : UInt = '0x0013'
  
    
  provided port ANDUA651BLE
  {
    sends WantsToConnect, FinishedConnection
    receives AllowedToConnect
  }
  
  
  message TelluCloudBloodPressure(observationTime : DateTime, health_pressure_diastolic : Int, health_pressure_mean : Int, health_pressure_systolic : Int, health_pulseRate : Int) @tellucloud_type "observation";
  message MqttRequestBloodPressureMeasurement();
  message MqttConfirmBloodPressureMeasurement();
  
  required port Tellu
  {
    sends TelluCloudBloodPressure
    receives MqttRequestBloodPressureMeasurement, MqttConfirmBloodPressureMeasurement
  }
  
  property DoSync : Boolean
  property GotMeasurement : Boolean
  property GotStored : Boolean
  property GotRequest : Boolean
  
  statechart States init Standby
  {
    on entry do
      // Set byte variables of properties
      LongTermKey = 'peer_ltk'
      EncryptedDiversifier = 'peer_ediv'
      RandomNumber = 'peer_random'
      'str2ba('&Address&', &'&AddressBT&');'
      'str2ba('&NotifierAddress&', &'&NotifierAddressBT&');'
    end
    
    state Standby
    {
      on entry do
        DoSync = false
      end
      
      internal event e:Scanner?ConnectableAdvertisement action do
        // Check if we want to connect to this device
        if (e.AddressType == AddressType and 'bacmp(&'&e.Address&', &'&AddressBT&')' == 0) do
          DoSync = true
          GotMeasurement = false
          ANDUA651BLE!WantsToConnect()
        end
      end
      
      // If we get requests or confirmations here, jump straight to the Notify state
      internal event Tellu?MqttRequestBloodPressureMeasurement action do
        GotRequest = true
        ANDUA651BLE!WantsToConnect()
      end
      internal event Tellu?MqttConfirmBloodPressureMeasurement action do
        GotStored = true
        ANDUA651BLE!WantsToConnect()
      end
      
      transition -> Connecting event ANDUA651BLE?AllowedToConnect guard (DoSync == true)
      transition -> Notify event ANDUA651BLE?AllowedToConnect guard (DoSync == false)
    }
    
    state Connecting
    {
      on entry do
        print "[INFO]: Connecting to A&D UA-651BLE...\n"
        Connecter!ConnectTo(AddressType, AddressBT, LongTermKey, EncryptedDiversifier, RandomNumber)
      end
      
      internal event e:Connecter?Connected action do
        ConnectedHandle = e.Handle
        Connecter!Encrypt()
      end
      
      transition -> Sync event Connecter?Encrypted
      
      transition -> Notify event Connecter?Stopped
      transition -> Notify event Connecter?Failure
    }
    
    composite state Sync init ReadBattery
    {
      on entry do
        print "[INFO]: Syncing with A&D UA-651BLE...\n"
      end
      
      state ReadBattery
      {
        on entry do
          print "[INFO]: Reading battery percentage...\n"
          ATT!ATTReadRequest(ConnectedHandle, BatteryValueHandle)
        end

        transition -> TimeSync event e:ATT?ATTReadResponse guard (e.ConnectionHandle == ConnectedHandle) action do
          var Percent : Byte = ''&e.AttributeValue&'.bytes[0]'
          'printf("[INFO]: Got battery percentage - %u%%\n", '&Percent&');'
          //Weightscale!BatteryPercentage(Percent)
        end

        internal event e:ATT?ATTReadError guard (e.ConnectionHandle == ConnectedHandle) action do
          print "[ERROR]: Could not read battery percentage!\n"
          Connecter!Stop()
        end
      }
      
      state TimeSync
      {
        on entry do
          print "[INFO]: Synchronizing the time...\n"
          var AttributeValue : GATTData
          // Read the UTC time
          '
            time_t utc = time(NULL);
            struct tm *ptm = gmtime(&utc);
          '
          // Write into ATT value
          '
            '&AttributeValue&'.length = 7;
            *((uint16_t*)&'&AttributeValue&'.bytes[0]) = ptm->tm_year+1900;
            *((uint8_t*)&'&AttributeValue&'.bytes[2]) = ptm->tm_mon+1;
            *((uint8_t*)&'&AttributeValue&'.bytes[3]) = ptm->tm_mday;
            *((uint8_t*)&'&AttributeValue&'.bytes[4]) = ptm->tm_hour;
            *((uint8_t*)&'&AttributeValue&'.bytes[5]) = ptm->tm_min;
            *((uint8_t*)&'&AttributeValue&'.bytes[6]) = ptm->tm_sec;
          '
          ATT!ATTWriteRequest(ConnectedHandle, '0x0017', AttributeValue)
        end

        transition -> GetValues event e:ATT?ATTWriteResponse action do
          print "[INFO]: Time synchronization successfull!\n"
        end

        internal event e:ATT?ATTWriteError action do
          print "[ERROR]: Time synchronization failed. Error code: "
          'printf("%2.2X", '&e.Error&');'
          print "!!\n"
          Connecter!Stop()
        end
      }
      
      state GetValues
      {        
        on entry do
          print "[INFO]: Requesting indications of Blood Pressure Measurement...\n"
          var AttributeValue : GATTData
          ''&AttributeValue&'.length = 2;'
          ''&AttributeValue&'.bytes[0] = 0x02;'
          ''&AttributeValue&'.bytes[1] = 0x00;'
          ATT!ATTWriteRequest(ConnectedHandle, BloodPressureConfigurationHandle, AttributeValue)
        end
        
        internal event e:ATT?ATTWriteError guard (e.ConnectionHandle == ConnectedHandle) action do
          print "[ERROR]: Could not set indications of Blood Pressure Measurement!\n"
          Connecter!Stop()
        end
        
        internal event e:ATT?ATTHandleValueIndication guard (e.ConnectionHandle == ConnectedHandle and e.AttributeHandle == BloodPressureValueHandle) action do
          '
            uint8_t length = '&e.AttributeValue&'.length;
            uint8_t *data  = '&e.AttributeValue&'.bytes;
            uint8_t index = 7;
          '
          /* Decode the data */
          var UnitsKPA : Boolean = 'data[0] & 0x01'
          var HasTimestamp : Boolean = '(data[0] & 0x02) >> 1'
          var HasPulseRate : Boolean = '(data[0] & 0x04) >> 2'
          var HasUserID : Boolean = '(data[0] & 0x08) >> 3'
          var HasMeasurementStatus : Boolean = '(data[0] & 0x10) >> 4'

          /* Blood pressure measurement */
          var Systolic : Float = 'sfloat_to_float(&data[1])'
          var Diastolic : Float = 'sfloat_to_float(&data[3])'
          var MeanArterial : Float = 'sfloat_to_float(&data[5])'

          /* Timestamp */
          var Year : UInt = 0
          var Month : Byte = 0
          var Day : Byte = 0
          var Hour : Byte = 0
          var Minute : Byte = 0
          var Second : Byte = 0
          if (HasTimestamp) do
            Year = '*(uint16_t*)&data[index+0]'
            Month = 'data[index+2]'
            Day = 'data[index+3]'
            Hour = 'data[index+4]'
            Minute = 'data[index+5]'
            Second = 'data[index+6]'
            'index = index+7;'
          end

          /* Pulse rate */
          var Pulse : Float = 0
          if (HasPulseRate) do
            Pulse = 'sfloat_to_float(&data[index])'
            'index = index+2;'
          end

          /* User ID */
          var UserID : Byte = 0
          if (HasUserID) do
            UserID = 'data[index]'
            'index = index+1;'
          end

          /* Measurement Status */
          var BodyMovement : Boolean = false
          var CuffFit : Boolean = false
          var IrregularPulse : Boolean = false
          var PulseRate : Byte = 0
          var MeasurementPosition : Boolean = false
          if (HasMeasurementStatus) do
            BodyMovement = 'data[index] & 0x01'
            CuffFit = '(data[index] & 0x02) >> 1'
            IrregularPulse = '(data[index] & 0x04) >> 2'
            PulseRate = '(data[index] & 0x18) >> 3'
            MeasurementPosition = '(data[index] & 0x20) >> 5'
          end

          // Print the measurement
          print "[INFO]: Got Blood Pressure measurement - "
          'printf("%.0f/%.0f (%.0f) ",'&Systolic&', '&Diastolic&', '&MeanArterial&');'
          if (UnitsKPA) print "kPa "
          else print "mmHg "
          if (HasPulseRate) do
            'printf("%.0fBPM ",'&Pulse&');'
          end
          if (HasTimestamp) do
            'printf("%u.%u.%u %u:%u:%u ",'&Day&', '&Month&', '&Year&', '&Hour&', '&Minute&', '&Second&');'
          end
          if (HasMeasurementStatus) do
            print "- "
            if (IrregularPulse) print "Irregular pulse detected "
            else print "Normal pulse detected "
          end

          print "\n"

          ATT!ATTHandleValueConfirmation(e.ConnectionHandle)

          /* Send to Tellu */
          if (HasTimestamp and '!isnan('&Systolic&')') do
            // Convert to DateTime
            var ObservationTime : DateTime = 0
            '
              struct tm timebuf;
              timebuf.tm_year = '&Year&'-1900;
              timebuf.tm_mon = '&Month&'-1;
              timebuf.tm_mday = '&Day&';
              timebuf.tm_hour = '&Hour&';
              timebuf.tm_min = '&Minute&';
              timebuf.tm_sec = '&Second&';
            '
            ObservationTime = 'timegm(&timebuf)'
            // Convert to Ints
            var HealthPressureDiastolic : Int = Diastolic
            var HealthPressureMean : Int = MeanArterial
            var HealthPressureSystolic : Int = Systolic
            var HealthPulseRate : Int = Pulse
            //Send
            Tellu!TelluCloudBloodPressure(ObservationTime, HealthPressureDiastolic, HealthPressureMean, HealthPressureSystolic, HealthPulseRate)

            GotMeasurement = true
          end
        end
      }
      
      transition -> Notify event Connecter?Stopped
      transition -> Notify event Connecter?Failure
    }
    
    composite state Notify init Wait
    {
      state Wait
      {
        on entry do
          ANDUA651BLE!WantsToConnect()
        end
        
        transition -> ConnectingNotifier event ANDUA651BLE?AllowedToConnect
      }
      
      state ConnectingNotifier
      {
        on entry do
          print "[INFO]: Connecting to A&D UA-651BLE notifier...\n"
          Notifications!NotifierConnect(NotifierAddressType, NotifierAddressBT)
        end

        transition -> ConnectedNotifier event Notifications?NotifierReady
      }
      
      state ConnectedNotifier
      {
        on entry do
          if (DoSync == true) do
            DoSync = false
            if (GotMeasurement == true) do
              Notifications!NotifierReceived()
            end else do
              Notifications!NotifierError()
            end
          end
          else if (GotStored == true) do
            GotStored = false
            Notifications!NotifierStored()
          end
          else if (GotRequest == true) do
            GotRequest = false
            Notifications!NotifierRequest()
          end
        end
        
        // Send more if we already got them
        transition -> ConnectingNotifier event Notifications?NotifierFinished guard (GotStored == true or GotRequest == true)
      }
      
      transition -> Standby event Notifications?NotifierFinished action ANDUA651BLE!FinishedConnection()
    }
    
    // Store requests and confirmations, we will eventually get to Notify
    internal event Tellu?MqttRequestBloodPressureMeasurement action GotRequest = true
    internal event Tellu?MqttConfirmBloodPressureMeasurement action GotStored = true
  }
}