import "ModuleMsgs.thingml"
import "HCIDatatypes.thingml"
import "HCISocket.thingml"

thing fragment BLEScannerMsgs
{
  message ConnectableAdvertisement(AddressType : BLEAddressType, Address : BTAddress);
}

thing fragment BLEScanner includes ModuleMsgs, BLEScannerMsgs
{
  required port Scanner
  {
    sends Start, Stop
    receives Started, Stopped, Failure
    receives ConnectableAdvertisement
  }
}

thing BLEScannerImpl includes ModuleMsgs, BLEScannerMsgs, HCISocket
{
  provided port Scanner
  {
    receives Start, Stop
    sends Started, Stopped, Failure
    sends ConnectableAdvertisement
  }

  statechart States init Standby
  {
    state Standby
    {
      transition -> Initiating event Scanner?Start
      
      internal event Scanner?Stop action Scanner!Stopped()
    }
    
    state Initiating
    {
      on entry do
        print "[INFO]: Setting scan parameters...\n"
        var Type : BLEScanType = BLEScanType:PASSIVE
        var Interval : Int = '0x0010'
        var Window : Int = '0x0010'
        var OwnAddressType : BLEAddressType = BLEAddressType:PUBLIC 
        var FilterPolicy : BLEScanFilterPolicy = BLEScanFilterPolicy:ALL
        HCICommands!SetLEScanParameters(Type, Interval, Window, OwnAddressType, FilterPolicy)
      end
      
      internal event e:HCIEvents?SetLEScanParametersCompleted guard (e.Status == 0) action HCICommands!SetLEScanEnable('0x01', '0x00')
      transition -> Failure event e:HCIEvents?SetLEScanParametersCompleted guard (e.Status > 0)
      
      transition -> Scanning event e:HCIEvents?SetLEScanEnableCompleted guard (e.Status == 0)
      transition -> Failure event e:HCIEvents?SetLEScanEnableCompleted guard (e.Status > 0)
      
      transition -> Stopping event Scanner?Stop
    }
    
    state Scanning
    {
      on entry do
        print "[INFO]: Scanning for incoming connections...\n"
        
        Scanner!Started()
      end
      
      internal event e:HCIEvents?LEAdvertisementReport action do
        if (e.Type == BLEAdvertisementReportType:ADV_IND or e.Type == BLEAdvertisementReportType:ADV_DIRECT_IND) do
          // This is a connectable advertisement
          Scanner!ConnectableAdvertisement(e.AddressType, e.Address)
        end
      end
      
      internal event Scanner?Start action Scanner!Started()
      transition -> Stopping event Scanner?Stop
    }
    
    state Stopping
    {
      on entry do
        print "[INFO]: Stopping scan...\n"
        
        HCICommands!SetLEScanEnable('0x00', '0x00')
      end
      
      transition -> Standby event e:HCIEvents?SetLEScanEnableCompleted guard (e.Status == 0) action Scanner!Stopped()
      transition -> Failure event e:HCIEvents?SetLEScanEnableCompleted guard (e.Status > 0)
    }

    state Failure
    {
      on entry do
        print "[ERROR]: BLE_scanner failed!\n"
        Scanner!Failure()
      end

      transition -> Initiating event Scanner?Start
      internal event Scanner?Stop action Scanner!Failure()
    }
  }
}