import "Datatypes.thingml"
import "HCIProxy.thingml"
import "SMPProxy.thingml"
import "ATTProxy.thingml"

thing fragment HCISocketMsgs
{
  message Open();
  message Close();

  message Opened(Address : BTAddress);
  message Closed();
}

thing fragment HCISocket includes HCISocketMsgs, HCIController, SMP, ATT
{
  required port Socket
  {
    sends Open, Close
    receives Opened, Closed
  }
}

thing HCISocketProxy includes HCISocketMsgs, HCIControllerProxy, SMPProxy, ATTProxy
{
  property Device : String // Device address or name

  provided port Socket
  {
    receives Open, Close
    sends Opened, Closed
  }

  /* Platform specific functions */
  abstract function OpenSocket() @abstract "true" @SuppressWarnings "Call" 
  abstract function CloseSocket() @abstract "true" @SuppressWarnings "Call"
  abstract function SocketIsOpen() : Byte  @abstract "true" @SuppressWarnings "Call"
  abstract function GetBTAddress()  : BTAddress @abstract "true" @SuppressWarnings "Call"

  abstract function SendCommand(Group : UInt, Command : UInt, Length : Byte, Data : DataPointer) @abstract "true" @SuppressWarnings "Call"
  abstract function SendACLData(Handle : UInt, CID : UInt, Length : UInt, Data : DataPointer) @abstract "true" @SuppressWarnings "Call"


  /* Receive ACL Data functions */
  function HandleACLData(Handle : UInt, PacketBoundary : ACLPacketBoundaryFlag, Broadcast : ACLBroadcastFlag, Length : UInt, Data : DataPointer) do
    if (PacketBoundary != ACLPacketBoundaryFlag:FIRST_FLUSHABLE) do
      print "[ERROR]: Got an ACL packet what was not the first automatically flushable packet. Implement handling of this!\n"
    end
    else do
      var NLength : UInt = '*((uint16_t*)&'&Data&'[0])'
      var CID : UInt = '*((uint16_t*)&'&Data&'[2])'
      var NData : DataPointer = '&'&Data&'[4]'

      if (CID == '0x0004') do // Attribute protocol
        OnATTData(Handle, NLength, NData)
      end
      if (CID == '0x0005') do // LE L2CAP signalling channel
        OnL2CAPData(Handle, NLength, NData)
      end
      if (CID == '0x0006') do // Security Manager protocol
        OnSMPData(Handle, NLength, NData)
      end

      if (CID != '0x0004' and CID != '0x0005' and CID != '0x0006') do
        print "[WARNING]: Got an L2CAP packet that was to an non-fixed channel!\n"
      end
    end
  end

  function OnL2CAPData(Handle : UInt, Length : UInt, Data : DataPointer) do
    print "!!! GOT LE L2CAP DATA !!!\n"
  end


  /* Statechart (platform independent) */
  statechart Socket init Closed 
  {
    state Closed
    {
      on entry CloseSocket()

      transition -> Opening event Socket?Open
    }

    state Opening
    {
      on entry OpenSocket()

      transition -> Open guard (SocketIsOpen() > 0) action Socket!Opened(GetBTAddress())
      transition -> Closed guard (SocketIsOpen() == 0) action Socket!Closed()
    }

    state Open
    {
      transition -> Closed guard (SocketIsOpen() == 0) action Socket!Closed()
      transition -> Closed event Socket?Close action Socket!Closed()

      /* ------ Commands to send ------ */
      /* --- BR/EDR commands --- */
      /* Link control */
      internal event e:Commands?Disconnect action do
        '
          disconnect_cp data;
          data.handle = '&e.ConnectionHandle&';
          data.reason = '&e.Reason&';
        '
        SendCommand('0x01', '0x0006', '3', '(uint8_t*)&data')
      end

      /* Controller configuration */
      internal event Commands?Reset action SendCommand('0x03', '0x0003', '0', 'NULL')

      internal event e:Commands?SetEventMask action SendCommand('0x03', '0x0001', '8', '(uint8_t*)&'&e.Mask)
      internal event Commands?SetEventMaskAll action do
        var Mask : HCIEventMask = '{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }'
        SendCommand('0x03', '0x0001', '8', '(uint8_t*)&'&Mask)
      end

      /* --- LE commands --- */
      /* Controller configuration */
      internal event e:Commands?SetLEEventMask action SendCommand('0x08', '0x0001', '8', '(uint8_t*)&'&e.Mask)
      internal event Commands?SetLEEventMaskAll action do
        var Mask : HCIEventMask = '{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }'
        SendCommand('0x08', '0x0001', '8', '(uint8_t*)&'&Mask)
      end

      /* Advertisement */
      internal event e:Commands?SetLEAdvertisementParameters action do
        '
          le_set_advertising_parameters_cp data;
          data.min_interval = '&e.MinInterval&';
          data.max_interval = '&e.MaxInterval&';
          data.advtype = '&e.Type&';
          data.own_bdaddr_type = '&e.OwnAddressType&';
          data.direct_bdaddr_type = '&e.PeerAddressType&';
          data.direct_bdaddr = '&e.PeerAddress&';
          data.chan_map = '&e.Channel&';
          data.filter = '&e.FilterPolicy&';
        '
        SendCommand('0x08', '0x0006', '15', '(uint8_t*)&data')
      end

      internal event e:Commands?SetLEAdvertisingData action do
        '
          le_set_advertising_data_cp data;
          data.length = '&e.Length&';
          memcpy(data.data, '&e.Data&'.bytes, 31);
        '
        SendCommand('0x08', '0x0008', '32', '(uint8_t*)&data')
      end

      internal event e:Commands?SetLEScanResponseData action do
        '
          le_set_scan_response_data_cp data;
          data.length = '&e.Length&';
          memcpy(data.data, '&e.Data&'.bytes, 31);
        '
        SendCommand('0x08', '0x0009', '32', '(uint8_t*)&data')
      end

      internal event e:Commands?SetLEAdvertiseEnable action SendCommand('0x08', '0x000A', '1', '(uint8_t*)&'&e.Enable)

      /* Scanning */
      internal event e:Commands?SetLEScanParameters action do
        '
          le_set_scan_parameters_cp data;
          data.type = '&e.Type&';
          data.interval = '&e.Interval&';
          data.window = '&e.Window&';
          data.own_bdaddr_type = '&e.OwnAddressType&';
          data.filter = '&e.FilterPolicy&';
        '
        SendCommand('0x08', '0x000B', '7', '(uint8_t*)&data')
      end

      internal event e:Commands?SetLEScanEnable action do
        '
          le_set_scan_enable_cp data;
          data.enable = '&e.Enable&';
          data.filter_dup = '&e.FilterDuplicates&';
        '
        SendCommand('0x08', '0x000C', '2', '(uint8_t*)&data')
      end

      /* Connections */
      internal event e:Commands?LECreateConnection action do
        '
          le_create_connection_cp data;
          data.interval = '&e.Interval&';
          data.window = '&e.Window&';
          data.initiator_filter = '&e.FilterPolicy&';
          data.peer_bdaddr_type = '&e.PeerAddressType&';
          data.peer_bdaddr = '&e.PeerAddress&';
          data.own_bdaddr_type = '&e.OwnAddressType&';
          data.min_interval = '&e.ConnIntervalMin&';
          data.max_interval = '&e.ConnIntervalMax&';
          data.latency = '&e.ConnLatency&';
          data.supervision_timeout = '&e.SupervisionTimeout&';
          data.min_ce_length = '&e.CELengthMin&';
          data.max_ce_length = '&e.CELengthMax&';
        '
        SendCommand('0x08', '0x000D', '25', '(uint8_t*)&data')
      end

      internal event Commands?LECreateConnectionCancel action SendCommand('0x08', '0x000E', '0', 'NULL')

      /* Encryption */
      internal event Commands?LERand action SendCommand('0x08', '0x0018', '0', 'NULL')

      internal event e:Commands?LEEncrypt action do
        '
          ble_random_number_t data[2];
          data[0] = '&e.Key&';
          data[1] = '&e.Plaintext&';
        '
        SendCommand('0x08', '0x0017', '32', 'data')
      end

      internal event e:Commands?LEStartEncryption action do
        '
          uint8_t data[28];
          *((uint16_t*)&data[0]) = '&e.ConnectionHandle&';
          *((ble_random_part_t*)&data[2]) = '&e.Random&';
          *((uint16_t*)&data[10]) = '&e.EDIV&';
          *((ble_random_number_t*)&data[12]) = '&e.LTK&';
        '
        SendCommand('0x08', '0x0019', '28', 'data')
      end

      /* ------ Security Manager Protocol ------ */
      internal event e:SMP?SMPPairingRequest action do
        '
          uint8_t data[7];
          data[0] = 0x01;
          data[1] = '&e.IOCapability&';
          data[2] = ('&e.OOBDataPresent&') ? 0x01 : 0x00;
          data[3] = ( (('&e.Bonding&') ? 0x01 : 0x00) | (('&e.MITM&') ? 0x04 : 0x00) | (('&e.SecureConnection&') ? 0x08 : 0x00) | (('&e.Keypress&') ? 0x10 : 0x00) );
          data[4] = '&e.MaximumEncryptionKeySize&';
          data[5] = '&e.InitiatorKeyDistribution&';
          data[6] = '&e.ResponderKeyDistribution&';
        '
        SendACLData(e.Handle, '0x0006', 7, 'data')
      end

      internal event e:SMP?SMPPairingResponse action do
        '
          uint8_t data[7];
          data[0] = 0x02;
          data[1] = '&e.IOCapability&';
          data[2] = ('&e.OOBDataPresent&') ? 0x01 : 0x00;
          data[3] = ( (('&e.Bonding&') ? 0x01 : 0x00) | (('&e.MITM&') ? 0x04 : 0x00) | (('&e.SecureConnection&') ? 0x08 : 0x00) | (('&e.Keypress&') ? 0x10 : 0x00) );
          data[4] = '&e.MaximumEncryptionKeySize&';
          data[5] = '&e.InitiatorKeyDistribution&';
          data[6] = '&e.ResponderKeyDistribution&';
        '
        SendACLData(e.Handle, '0x0006', 7, 'data')
      end

      internal event e:SMP?SMPPairingConfirm action do
        '
          uint8_t data[17];
          data[0] = 0x03;
          *((ble_random_number_t*)&data[1]) = '&e.ConfirmValue&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPPairingRandom action do
        '
          uint8_t data[17];
          data[0] = 0x04;
          *((ble_random_number_t*)&data[1]) = '&e.RandomValue&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPPairingFailed action do
        '
          uint8_t data[2];
          data[0] = 0x05;
          data[1] = '&e.Reason&';
        '
        SendACLData(e.Handle, '0x0006', 2, 'data')
      end

      internal event e:SMP?SMPEncryptionInformation action do
        '
          uint8_t data[17];
          data[0] = 0x06;
          *((ble_random_number_t*)&data[1]) = '&e.LongTermKey&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPMasterIdentification action do
        '
          uint8_t data[11];
          data[0] = 0x07;
          *((uint16_t*)&data[1]) = '&e.EDIV&';
          *((ble_random_part_t*)&data[3]) = '&e.Rand&';
        '
        SendACLData(e.Handle, '0x0006', 11, 'data')
      end

      internal event e:SMP?SMPIdentityInformation action do
        '
          uint8_t data[17];
          data[0] = 0x08;
          *((ble_random_number_t*)&data[1]) = '&e.IdentityResolvingKey&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPIdentityAddressInformation action do
        '
          uint8_t data[8];
          data[0] = 0x09;
          data[1] = '&e.AddressType&';
          *((bdaddr_t*)&data[2]) = '&e.Address&';
        '
        SendACLData(e.Handle, '0x0006', 8, 'data')
      end

      internal event e:SMP?SMPSigningInformation action do
        '
          uint8_t data[17];
          data[0] = 0x0A;
          *((ble_random_number_t*)&data[1]) = '&e.SignatureKey&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPSecurityRequest action do
        '
          uint8_t data[2];
          data[0] = 0x0B;
          data[1] = ( (('&e.Bonding&') ? 0x01 : 0x00) | (('&e.MITM&') ? 0x04 : 0x00) | (('&e.SecureConnection&') ? 0x08 : 0x00) | (('&e.Keypress&') ? 0x10 : 0x00) );
        '
        SendACLData(e.Handle, '0x0006', 2, 'data')
      end

      internal event e:SMP?SMPPairingPublicKey action do
        '
          uint8_t data[65];
          data[0] = 0x0C;
          *((smp_public_key_t*)&data[1]) = '&e.KeyX&';
          *((smp_public_key_t*)&data[33]) = '&e.KeyY&';
        '
        SendACLData(e.Handle, '0x0006', 65, 'data')
      end

      internal event e:SMP?SMPPairingDHKeyCheck action do
        '
          uint8_t data[17];
          data[0] = 0x0D;
          *((ble_random_number_t*)&data[1]) = '&e.DHKeyCheck&';
        '
        SendACLData(e.Handle, '0x0006', 17, 'data')
      end

      internal event e:SMP?SMPKeypressNotification action do
        '
          uint8_t data[2];
          data[0] = 0x0E;
          data[1] = '&e.Type&';
        '
        SendACLData(e.Handle, '0x0006', 2, 'data')
      end


      /* ----------- Attribute Protocol ----------- */
      internal event e:ATT?ATTFindInformationRequest action do
        '
          uint8_t data[5];
          data[0] = 0x04;
          *((uint16_t*)&data[1]) = '&e.StartingHandle&';
          *((uint16_t*)&data[3]) = '&e.EndingHandle&';
        '
        SendACLData(e.ConnectionHandle, '0x0004',  5, 'data')
      end

      internal event e:ATT?ATTFindInformationResponse action do
        '
          uint8_t data[25];
          data[0] = 0x05;
          data[1] = '&e.Format&';
          memcpy(&data[2], '&e.InformationData&'.bytes, '&e.InformationData&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '2+'&e.InformationData&'.length', 'data')
      end

      internal event e:ATT?ATTFindInformationError action do
        '
          uint8_t data[5];
          data[0] = 0x01;
          data[1] = 0x04;
          *((uint16_t*)&data[2]) = '&e.AttributeHandle&';
          data[4] = '&e.Error&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 5, 'data')
      end

      internal event e:ATT?ATTReadByTypeRequest action do
        '
          uint8_t data[21];
          data[0] = 0x08;
          *((uint16_t*)&data[1]) = '&e.StartingHandle&';
          *((uint16_t*)&data[3]) = '&e.EndingHandle&';
          memcpy(&data[5], &'&e.AttributeType&', 16);
        '
        SendACLData(e.ConnectionHandle, '0x0004',  21, 'data')
      end

      internal event e:ATT?ATTReadByTypeResponse action do
        '
          uint8_t data[25];
          data[0] = 0x09;
          data[1] = '&e.Length&';
          memcpy(&data[2], '&e.AttributeDataList&'.bytes, '&e.AttributeDataList&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '2+'&e.AttributeDataList&'.length', 'data')
      end

      internal event e:ATT?ATTReadByTypeError action do
        '
          uint8_t data[5];
          data[0] = 0x01;
          data[1] = 0x08;
          *((uint16_t*)&data[2]) = '&e.AttributeHandle&';
          data[4] = '&e.Error&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 5, 'data')
      end

      internal event e:ATT?ATTReadRequest action do
        '
          uint8_t data[3];
          data[0] = 0x0A;
          *((uint16_t*)&data[1]) = '&e.AttributeHandle&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 3, 'data')
      end

      internal event e:ATT?ATTReadResponse action do
        '
          uint8_t data[24];
          data[0] = 0x0B;
          memcpy(&data[1], '&e.AttributeValue&'.bytes, '&e.AttributeValue&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '1+'&e.AttributeValue&'.length', 'data')
      end

      internal event e:ATT?ATTReadError action do
        '
          uint8_t data[5];
          data[0] = 0x01;
          data[1] = 0x0A;
          *((uint16_t*)&data[2]) = '&e.AttributeHandle&';
          data[4] = '&e.Error&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 5, 'data')
      end
      
      internal event e:ATT?ATTReadByGroupTypeRequest action do
        '
          uint8_t data[21];
          data[0] = 0x10;
          *((uint16_t*)&data[1]) = '&e.StartingHandle&';
          *((uint16_t*)&data[3]) = '&e.EndingHandle&';
          memcpy(&data[5], &'&e.AttributeGroupType&', 16);
        '
        SendACLData(e.ConnectionHandle, '0x0004',  21, 'data')
      end

      internal event e:ATT?ATTReadByGroupTypeResponse action do
        '
          uint8_t data[25];
          data[0] = 0x11;
          data[1] = '&e.Length&';
          memcpy(&data[2], '&e.AttributeDataList&'.bytes, '&e.AttributeDataList&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '2+'&e.AttributeDataList&'.length', 'data')
      end

      internal event e:ATT?ATTReadByGroupTypeError action do
        '
          uint8_t data[5];
          data[0] = 0x01;
          data[1] = 0x10;
          *((uint16_t*)&data[2]) = '&e.AttributeHandle&';
          data[4] = '&e.Error&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 5, 'data')
      end

      internal event e:ATT?ATTWriteRequest action do
        '
          uint8_t data[26];
          data[0] = 0x12;
          *((uint16_t*)&data[1]) = '&e.AttributeHandle&';
          memcpy(&data[3], '&e.AttributeValue&'.bytes, '&e.AttributeValue&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '3+'&e.AttributeValue&'.length', 'data')
      end

      internal event e:ATT?ATTWriteResponse action do
        '
          uint8_t data[1];
          data[0] = 0x13;
        '
        SendACLData(e.ConnectionHandle, '0x0004', '1', 'data')
      end

      internal event e:ATT?ATTWriteError action do
        '
          uint8_t data[5];
          data[0] = 0x01;
          data[1] = 0x12;
          *((uint16_t*)&data[2]) = '&e.AttributeHandle&';
          data[4] = '&e.Error&';
        '
        SendACLData(e.ConnectionHandle, '0x0004', 5, 'data')
      end

      internal event e:ATT?ATTWriteCommand action do
        '
          uint8_t data[26];
          data[0] = 0x52;
          *((uint16_t*)&data[1]) = '&e.AttributeHandle&';
          memcpy(&data[3], '&e.AttributeValue&'.bytes, '&e.AttributeValue&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '3+'&e.AttributeValue&'.length', 'data')
      end

      internal event e:ATT?ATTHandleValueNotification action do
        '
          uint8_t data[26];
          data[0] = 0x1B;
          *((uint16_t*)&data[1]) = '&e.AttributeHandle&';
          memcpy(&data[3], '&e.AttributeValue&'.bytes, '&e.AttributeValue&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '3+'&e.AttributeValue&'.length', 'data')
      end

      internal event e:ATT?ATTHandleValueIndication action do
        '
          uint8_t data[26];
          data[0] = 0x1D;
          *((uint16_t*)&data[1]) = '&e.AttributeHandle&';
          memcpy(&data[3], '&e.AttributeValue&'.bytes, '&e.AttributeValue&'.length);
        '
        SendACLData(e.ConnectionHandle, '0x0004', '3+'&e.AttributeValue&'.length', 'data')
      end

      internal event e:ATT?ATTHandleValueConfirmation action do
        '
          uint8_t data[1];
          data[0] = 0x1E;
        '
        SendACLData(e.ConnectionHandle, '0x0004', '1', 'data')
      end
    }
  }
}
